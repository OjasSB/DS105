[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Month Marginalisation: Is there a relative age effect in politics?",
    "section": "",
    "text": "We are the Data Democrats and we are investigating the following question:"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Abstract",
    "section": "",
    "text": "What our project entails"
  },
  {
    "objectID": "python.html",
    "href": "python.html",
    "title": "CODE",
    "section": "",
    "text": "testing code as well"
  },
  {
    "objectID": "index.html#section",
    "href": "index.html#section",
    "title": "D105 Final Project",
    "section": "1",
    "text": "1\nData collection"
  },
  {
    "objectID": "index.html#data-collection",
    "href": "index.html#data-collection",
    "title": "D105 Final Project",
    "section": "1 Data collection",
    "text": "1 Data collection"
  },
  {
    "objectID": "analysis-process.html",
    "href": "analysis-process.html",
    "title": "Analysis Process",
    "section": "",
    "text": "1. Data Collection\nCollect data for each country and convert it to a pandas datafram  \n\n\n2. Combining Data for all countries\nConcantenate dataframes for each legislature and save the data frame \n\n\n3. Fixing the January Skew\nRemove all incomplete dates, and the counteract the source normalisation of dates by removing some countries \n\n\n4. Adding population data\nFilter UN Birth Data and group by month. Then we can convert it into a tidy dataframe\n\n\n5. Merge Both Datasets\nReindex and transform both dataframes to enable merging \n\n\n6. Transform for Plotting\nCreate columns for difference, percentage differences, and catergorical variables \n\n\n7. Visualisations\nCreate plots of MP's against population by month, and percentage difference between them. Create distributions. \n\n\n8. Exploratory Data Analysis\nPotential explanations of variations"
  },
  {
    "objectID": "pol-rep.html",
    "href": "pol-rep.html",
    "title": "Factors affecting political representation",
    "section": "",
    "text": "Exploring biographical factors affecting political representation\nWe explore various factors that may affect political representation:\n\nBirth Month & Relative Age Effect üìÖ\n\n\nGender üöª\n\n\nFirst Letter & Length of Name üî°\n\n\nZodiac (for entertainment purposes only) üòÜ\n\n\nDay of Birth üìÜ\n\n\nUniversity Education: UK only üéì\n\n\nAge - UK only üë¥\nside note: will get the source code for every politician on here and for wikipedia - i have also left space in the code to add a description of each factor and the specific code for each - not sure why the gender hasnt boldened"
  },
  {
    "objectID": "data-col.html",
    "href": "data-col.html",
    "title": "Data Collection and Cleaning",
    "section": "",
    "text": "data collection and cleaning - add the data cleaning notebook - can embedd parts of the notebook -\n\nprint(\"hi\")\n\nhi"
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "Exploratory Data Analysis",
    "section": "",
    "text": "We want to explore the following questions\n\nDoes the month you‚Äôre born in affect your chances of becoming a politician?\nWhy are some months more likely to ‚Äòbirth‚Äô politicians more than others?\nIs a certain gender more likely to become a politician?"
  },
  {
    "objectID": "uk.html",
    "href": "uk.html",
    "title": "UK Analysis",
    "section": "",
    "text": "This page is for the UK analysis specifically"
  },
  {
    "objectID": "visual.html",
    "href": "visual.html",
    "title": "Untitled",
    "section": "",
    "text": "print(‚Äúhello‚Äù)"
  },
  {
    "objectID": "notebook.html",
    "href": "notebook.html",
    "title": "notebook",
    "section": "",
    "text": "['https://en.wikipedia.org/wiki/Bim_Afolami',\n 'https://en.wikipedia.org/wiki/Peter_Aldous',\n 'https://en.wikipedia.org/wiki/David_Amess',\n 'https://en.wikipedia.org/wiki/Richard_Bacon_(politician)',\n 'https://en.wikipedia.org/wiki/Kemi_Badenoch',\n 'https://en.wikipedia.org/wiki/Duncan_Baker',\n 'https://en.wikipedia.org/wiki/Steve_Barclay_(politician)',\n 'https://en.wikipedia.org/wiki/John_Baron_(politician)',\n 'https://en.wikipedia.org/wiki/Paul_Bristow',\n 'https://en.wikipedia.org/wiki/Anthony_Browne_(politician)',\n 'https://en.wikipedia.org/wiki/Alex_Burghart',\n 'https://en.wikipedia.org/wiki/James_Cartlidge',\n 'https://en.wikipedia.org/wiki/Jo_Churchill',\n 'https://en.wikipedia.org/wiki/James_Cleverly',\n 'https://en.wikipedia.org/wiki/Th√©r√®se_Coffey']\n\n\nGetting rid of the 12 MPs who have resigned or died since the last election\n\n\n532\n\n\nWe investigate the missing MP later, using TheyWorkForYou‚Äôs database of sitting MPs, after completing analysis for other parts of the UK\n\nWales\nThe number of MP‚Äôs for constituencies in Wales\n\n\n40\n\n\n\n\nScotland\nThe number of MP‚Äôs for constituencies in Scotland\n\n\n59\n\n\n\n\nNorthern Ireland\nThe number of MP‚Äôs for constituencies in Northern Island\n\n\n18\n\n\nNow we cmake a list of all UK MP‚Äôs\n\n\n649\n\n\nSomething is wrong here, there are 650 sitting MP‚Äôs, but there are only 649 links\nWe need to find out which one is missing\n\n\n['Jon_Ashworth',\n 'Steven_Baker',\n 'Therese_Coffey',\n 'Edward_Davey',\n 'Jeffrey_M._Donaldson',\n 'Nicholas_Fletcher',\n 'Nusrat_Ghani',\n 'Preet_Kaur_Gill',\n 'Matthew_Hancock',\n 'Christopher_Hazzard',\n 'Dr_Caroline_Johnson',\n 'Diana_R._Johnson',\n 'Kate_Kniveton',\n 'John_Martin_McDonnell',\n 'Navendu_Mishra',\n 'Ian_Paisley_Jnr',\n 'Christopher_Pincher',\n 'Liz_Saville-Roberts',\n 'Naseem_Shah',\n 'Andrew_Slaughter',\n 'Elizabeth_Truss',\n 'Thomas_Tugendhat']\n\n\nBy using the ‚Äòregex‚Äô package we can see which name is missing from the list of 649 MP‚Äôs\nGiven the nature of some names (eg Jon Ashworth vs Jonathan Ashworth) I need to find the missing MP by hand from this list of 23 anomalies identified by regex search\nThe missing MP is Kim Leadbeater, who was elected in July 2021 - this is a mistake on Wikipedia‚Äôs part, for not including her in the longlist of MPs at time of writing (she replaced Tracy Babin post-resignation, but her name was not added to the England list)\n\n\n650\n\n\nShe has now been added to the list manually\n\n\nExtracting information for UK-focused analysis\n‚Ä¢ MP birth date\n‚Ä¢ MP alma mater (university)\nWe create a function that takes a link to a UK MP‚Äôs Wikipedia page and returns a dictionary of their name, birth date, party, and university\nThen we test the function on just a singular MP\n\n\n\n\n\n\n\n\n\nname\nbirth date\nparty\nuniversity\n\n\n\n\n0\nShailesh Vara\n1960-09-04\nConservative\nBrunel University\n\n\n\n\n\n\n\nGreat! It works\nNow we get a dataframe of all the sitting MPs birthday date, party, alma mater and name:\n\n\n\n\n\n\n\n\n\nname\nbirth date\nparty\nuniversity\nage\n\n\n\n\n0\nBim Afolami\n1986-02-11\nConservative\nUniversity College, Oxford\n37.3\n\n\n0\nPeter Aldous\n1961-08-26\nConservative\nUniversity of Reading\n61.7\n\n\n0\nRichard Bacon\n1962-12-03\nConservative\nLondon School of Economics\n60.5\n\n\n0\nKemi Badenoch\n1980-01-02\nConservative\nUniversity of Sussex\n43.4\n\n\n0\nDuncan Baker\n1979-11-15\nConservative Party\nNottingham Trent University\n43.5\n\n\n...\n...\n...\n...\n...\n...\n\n\n0\nIan Paisley Jr\n1966-12-12\nDemocratic Unionist Party\nQueen's University Belfast\n56.4\n\n\n0\nGavin Robinson\n1984-11-22\nDemocratic Unionist Party\nUlster University\n38.5\n\n\n0\nJim Shannon\n1955-03-25\nDemocratic Unionist Party Spokesperson for Hea...\nNone\n68.2\n\n\n0\nSammy Wilson\n1953-04-04\nDemocratic Unionist Party Chief Whip in the Ho...\nQueen's University Belfast\n70.1\n\n\n0\nKim Leadbeater\n1976-05-01\nLabour\nLeeds Beckett University\n47.0\n\n\n\n\n650 rows √ó 5 columns\n\n\n\n\n\n\n\n\n\n\n\n\nname\nbirth date\nparty\nuniversity\nage\n\n\n\n\n0\nBim Afolami\n1986-02-11\nConservative\nUniversity College, Oxford\n37.3\n\n\n0\nPeter Aldous\n1961-08-26\nConservative\nUniversity of Reading\n61.7\n\n\n0\nRichard Bacon\n1962-12-03\nConservative\nLondon School of Economics\n60.5\n\n\n0\nKemi Badenoch\n1980-01-02\nConservative\nUniversity of Sussex\n43.4\n\n\n0\nDuncan Baker\n1979-11-15\nConservative Party\nNottingham Trent University\n43.5\n\n\n...\n...\n...\n...\n...\n...\n\n\n0\nIan Paisley Jr\n1966-12-12\nDemocratic Unionist Party\nQueen's University Belfast\n56.4\n\n\n0\nGavin Robinson\n1984-11-22\nDemocratic Unionist Party\nUlster University\n38.5\n\n\n0\nJim Shannon\n1955-03-25\nDemocratic Unionist Party Spokesperson for Hea...\nNone\n68.2\n\n\n0\nSammy Wilson\n1953-04-04\nDemocratic Unionist Party Chief Whip in the Ho...\nQueen's University Belfast\n70.1\n\n\n0\nKim Leadbeater\n1976-05-01\nLabour\nLeeds Beckett University\n47.0\n\n\n\n\n650 rows √ó 5 columns"
  },
  {
    "objectID": "notebook.html#this-page-will-contain-code-form-the-notebook",
    "href": "notebook.html#this-page-will-contain-code-form-the-notebook",
    "title": "notebook",
    "section": "This page will contain code form the notebook",
    "text": "This page will contain code form the notebook"
  },
  {
    "objectID": "uk-analysis1.html",
    "href": "uk-analysis1.html",
    "title": "Exploring University",
    "section": "",
    "text": "Code\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nimport numpy as np\nimport re\nfrom plotnine import * \nimport seaborn as sns \nsns.set_theme(\"talk\", \"whitegrid\")\n\n\nWe now want to explore how the university the indivdual went to may affect their chances of becoming a politican.\n\nWe wanted to explore different paths that affect an individual‚Äôs chance of becoming a politician as such there may be a selection bias that those who went to a particular university are more likley to become politicians.\n\n\nThis also could have certain implications for policy-makers - to increase the quantity and quality of politicians.\n\nHowever, we found some issues in trying to compare our population data and the universities they attened. For example, many developing countries had incomplete and messy data, meaning that we could not compare education across countries. This is highlighted in the table below:\n\n\n\n\nComparing Data Types with UK and a developing country\n\n\n\nRow 1, col 1 item\n\n\nRow 1, col 2 item\n\n\nRow 1, col 3 item\n\n\n\n\nRow 2, col 1 item\n\n\nRow 2, col 2 item\n\n\nRow 2, col 3 item\n\n\n\n\nThere was a clear trend between going to Oxbridge and being a politician in the UK which is validated by the university and number of MP‚Äôs percentage table.\n\nOn this page we show a visualisation of the table exhibits how two to three times more MP‚Äôs attend Oxford and Cambridge than other top 10 universities. A substantially high number of politicians also attend LSE.\n\n\nThis might be explained by the extensive political networks, influential alumni, and enhanced perceived competence gained from attending prestigious universities like Oxford, Cambridge, or LSE which positively influence the likelihood of becoming a politician.\n\n\nA Times Higher article based on testimonials of students from prestigious universities validates this stating how top-ranked universities tend to have stronger alumni networks as well as higher perceived degree value improving job prospects.\n\n\nUsing the Wikipedia API\n\n\nBy using the Wikipedia API, we scraped the html for the page that lists the current sitting England MP‚Äôs\n\n\n\nCode\n# I want to use the Wikipedia API to get the html for the page that lists current sitting England MPs\n \neng_page_key = 'List_of_MPs_for_constituencies_in_England_(2019‚Äìpresent)'\neng_page_endpoint = 'page/' + eng_page_key + '/html'\nstem_url = 'https://en.wikipedia.org/w/rest.php/v1/'\nuniversal_url = 'https://en.wikipedia.org/wiki/'\nheaders = {'User-Agent': 'Student Project'}\n\neng_url = stem_url + eng_page_endpoint\n\ndef get_html(url):\n    r = requests.get(url, headers=headers)\n    s = BeautifulSoup(r.text)\n    return s\n\n# I want to get a list of all the wikitables on the page\ndef get_wikitables(s):\n    wikitables = s.find_all('table', class_='wikitable')\n    return wikitables\n\n# I want to get only the 3rd, 5th, 7th, 9th, 11th, 13th, 15th, 17th and 19th tables in one list, as these contain the MPs\nengland_mp_wikitables = get_wikitables(get_html(eng_url))[2:20:2]\nengland_mp_wikitables\n\n# I want to get the links from the mp tables and put them in a list\neng_names = [link.text for table in england_mp_wikitables for link in table.find_all('span', class_='fn')]\neng_names = [link.replace(\" \", \"_\") for link in eng_names]\neng_links = [link.find('a')['href'] for table in england_mp_wikitables for link in table.find_all('span', class_='fn')]\nengland_mp_links = [link.replace(\"./\", universal_url) for link in eng_links]\n# england_mp_links[:15] \n\n# I need to get rid of the 12 MPs who have resigned or died since the last election - they are only in the england page, and are italicised in the page\npage_html = get_html(eng_url).find_all('i')\nrelevant_lines = page_html[1:13]\nresigned_MP_links = [link.get('href') for i in relevant_lines for link in i.find_all('a')]\nresigned_MP_links = [link.replace(\"./\", universal_url) for link in resigned_MP_links]\nresigned_MP_links = [link.replace(\" \", \"_\") for link in resigned_MP_links]\nlen(resigned_MP_links)\n# I want to get rid of the resigned MPs from the list of links\nengland_mp_links_final = [link for link in england_mp_links if link not in resigned_MP_links]\n# len(england_mp_links_final)\n# I encounter an issue here - there is one too few MP for England (532 instead of 533)\n\n\nSince the UK is split into three countries, hence three different constinuencies, we use the Wikipedia API to retrieve a list of the current MP‚Äôs sitting in each constinuency; Wales, Scotland, Northern Ireland.\n\nWales\nThe number of MP‚Äôs for constituencies in Wales\n\n\nCode\n# I want to use the Wikipedia API to get the html for the page that lists current sitting Welsh MPs\nwal_page_key = 'List_of_MPs_for_constituencies_in_Wales_(2019‚Äìpresent)'\nwal_page_endpoint = 'page/' + wal_page_key + '/html'\nstem_url = 'https://en.wikipedia.org/w/rest.php/v1/'\nuniversal_url = 'https://en.wikipedia.org/wiki/'\nheaders = {'User-Agent': 'Student Project'}\n\nwal_url = stem_url + wal_page_endpoint\n\nwales_mp_wikitables = get_wikitables(get_html(wal_url))[1]\nwales_mp_wikitables\n\nwal_names = [link.text for link in wales_mp_wikitables.find_all('span', class_='fn')]\nwal_names = [link.replace(\" \", \"_\") for link in wal_names]\nwal_links = [link.find('a')['href'] for link in wales_mp_wikitables.find_all('span', class_='fn')]\nwales_mp_links = [link.replace(\"./\", universal_url) for link in wal_links]\nlen(wales_mp_links)\n\n\n40\n\n\n\n\nScotland\nThe number of MP‚Äôs for constituencies in Scotland\n\n\nCode\nsco_page_key = 'List_of_MPs_for_constituencies_in_Scotland_(2019‚Äìpresent)'\nsco_page_endpoint = 'page/' + sco_page_key + '/html'\nstem_url = 'https://en.wikipedia.org/w/rest.php/v1/'\nuniversal_url = 'https://en.wikipedia.org/wiki/'\nheaders = {'User-Agent': 'Student Project'}\n\nsco_url = stem_url + sco_page_endpoint\n\nscotland_mp_wikitables = get_wikitables(get_html(sco_url))[1]\nscotland_mp_wikitables\n\n# I want to get the links from the mp tables and put them in a list\nsco_names = [link.text for link in scotland_mp_wikitables.find_all('span', class_='fn')]\nsco_names = [link.replace(\" \", \"_\") for link in sco_names]\nsco_links = [link.find('a')['href'] for link in scotland_mp_wikitables.find_all('span', class_='fn')]\nscotland_mp_links = [link.replace(\"./\", universal_url) for link in sco_links]\nlen(scotland_mp_links)\n\n\n59\n\n\n\n\nNorthern Ireland\nThe number of MP‚Äôs for constituencies in Northern Island\n\n\nCode\nni_page_key = 'List_of_MPs_for_constituencies_in_Northern_Ireland_(2019‚Äìpresent)'\nni_page_endpoint = 'page/' + ni_page_key + '/html'\nstem_url = 'https://en.wikipedia.org/w/rest.php/v1/'\nuniversal_url = 'https://en.wikipedia.org/wiki/'\nheaders = {'User-Agent': 'Student Project'}\n\nni_url = stem_url + ni_page_endpoint\n\nnorthern_ireland_mp_wikitables = get_wikitables(get_html(ni_url))[2]\nnorthern_ireland_mp_wikitables\n\n# I want to get the links from the mp tables and put them in a list\n\nni_names = [link.text for link in northern_ireland_mp_wikitables.find_all('span', class_='fn')]\nni_names = [link.replace(\" \", \"_\") for link in ni_names]\nni_links = [link.find('a')['href'] for link in northern_ireland_mp_wikitables.find_all('span', class_='fn')]\nnorthern_ireland_mp_links = [link.replace(\"./\", universal_url) for link in ni_links]\nlen(northern_ireland_mp_links) \n\n\n\n18\n\n\nThen we made the final list of all MPs, but realise that something is wrong here! There are supposed to be 650 sitting MPs, yet our list produces 649 - we try and find out which oone is missing.\n\n\nCode\nuk_mp_links = england_mp_links_final + wales_mp_links + scotland_mp_links + northern_ireland_mp_links\nlen(uk_mp_links)\n# uk_mp_links\n# Something is wrong - there are 650 sitting MPs, but I have 649 links. I need to find out which one is missing\n\n\n649\n\n\nWe need to find out which one is missing\n\nWe investigate the missing MP by using TheyWorkForYou‚Äôs database of sitting MPs\n\n\n\nCode\npages_html = get_html('https://www.theyworkforyou.com/mps/')\nmp_names_twfy = pages_html.find_all('h2', class_='people-list__person__name')\nmp_names_twfy = [link.text for link in mp_names_twfy]\nmp_names_twfy = [link.replace(\" \", \"_\") for link in mp_names_twfy]\nlen(mp_names_twfy)\n# Now using regex I want to see which name is missing from my list of 649 UK MPs\nmissing_by_regex = [name for name in mp_names_twfy if re.search(name, str(uk_mp_links)) == None]\n# missing_by_regex\n# Given the nature of some names (eg Jon Ashworth vs Jonathan Ashworth) I need to find the missing MP by hand from this list of 23 anomalies identified by regex search\n# I have found that the missing MP is Kim Leadbeater, who was elected in July 2021 - this is a mistake on Wikipedia's part, for not including her in the longlist of MPs at time of writing (she replaced Tracy Babin post-resignation, but her name was not added to the England list)\n# I will add her to the list of links manually, but add a check in case she is added to the Wikipedia list in the future\n\n\nBy using the ‚Äòregex‚Äô package we can see which name is missing from the list of 649 MP‚Äôs\nGiven the nature of some names (eg. Jon Ashworth vs Jonathan Ashworth) we needed to find the missing MP by hand from this list of 23 anomalies identified by regex search\n\n\nCode\nmissing_by_regex\n\n\n['Jon_Ashworth',\n 'Steven_Baker',\n 'Therese_Coffey',\n 'Edward_Davey',\n 'Jeffrey_M._Donaldson',\n 'Nicholas_Fletcher',\n 'Nusrat_Ghani',\n 'Preet_Kaur_Gill',\n 'Matthew_Hancock',\n 'Christopher_Hazzard',\n 'Dr_Caroline_Johnson',\n 'Diana_R._Johnson',\n 'Kate_Kniveton',\n 'Kim_Leadbeater',\n 'John_Martin_McDonnell',\n 'Navendu_Mishra',\n 'Ian_Paisley_Jnr',\n 'Christopher_Pincher',\n 'Liz_Saville-Roberts',\n 'Naseem_Shah',\n 'Andrew_Slaughter',\n 'Elizabeth_Truss',\n 'Thomas_Tugendhat']\n\n\nThe missing MP is Kim Leadbeater, who was elected in July 2021 - this is a mistake on Wikipedia‚Äôs part, for not including her in the longlist of MPs at time of writing (she replaced Tracy Babin post-resignation, but her name was not added to the England list)\n\nWe added her to the list to complete our list of 650 MPs\n\n\n\nCode\nmissing_mp_link = 'https://en.wikipedia.org/wiki/Kim_Leadbeater'\ndef add_missing_link(link):\n    if link not in uk_mp_links:\n        uk_mp_links.append(link)\n    else:\n        pass\n    return uk_mp_links\n\nuk_mp_links_final = add_missing_link(missing_mp_link)\nlen(uk_mp_links_final) \n# uk_mp_links_final\n# I now have 650 links, \n\n\n650\n\n\n\n\nExtracting information for UK-focused analysis\nWe group MPs by the following:\n\n‚Ä¢ MP birth date\n\n\n‚Ä¢ MP alma mater (university)\n\nWe then created a function that takes a link to a UK MP‚Äôs Wikipedia page and returns a dictionary of their name, birth date, party, and university.\n\nAfter extracting the information we wanted for our UK focused analysis, we constructed the final data frame which includes all MPs birth dates, party, alma mater and name.\n\nThen we test the function on just a singular MP\n\n\nCode\n# I want to create a function that takes a link to a UK MP's Wikipedia page and returns a dictionary of their name, birth date, party and university\ndef get_mp_info(link):\n        mp_info = {}\n        mp_page_html = get_html(link)\n        mp_page_infobox = mp_page_html.find('table', class_='infobox')\n        try: \n            mp_info['name'] = mp_page_html.find('div', class_='fn').text\n        except: \n            mp_info['name'] = None\n        if mp_info['name'] == 'Nigel Evans':\n            mp_info['birth date'] = '1957-11-10'\n        else:\n            try:\n                mp_info['birth date'] = mp_page_html.find('span', class_ = 'bday').text\n            except:\n                mp_info['birth date'] = None\n        all_mp_page_links = mp_page_infobox.find_all('a', title = True)\n        try:\n            mp_info['party'] = [link.text for link in all_mp_page_links if re.search('Party|Liberal Democrats|Co-operative|Sinn|Independent|Conservative|Labour|Plaid', str(link)) != None][0]\n        except:\n            mp_info['party'] = None\n        try:\n            mp_info['university'] = [link.text for link in all_mp_page_links if re.search('University|London School of Economics|Imperial|Guildhall|Malachy|, Oxford|, Cambridge|Oxford$|Cambridge$', str(link)) != None][0]\n        except:\n            mp_info['university'] = None\n        return pd.DataFrame(mp_info, index = [0])\n\n# I want to test the function on a random MP\nget_mp_info('https://en.wikipedia.org/wiki/Shailesh_Vara') \n\nuk_mps_df= pd.concat([get_mp_info(link) for link in uk_mp_links_final])\n# uk_mps_df = pd.DataFrame([get_mp_info(link) for link in uk_mp_links_final])\n# NB takes &lt;5 mins to run \n\nuk_mps_df['birth date'] = pd.to_datetime(uk_mps_df['birth date'])\nuk_mps_df['age'] = round((pd.to_datetime('today') - uk_mps_df['birth date'])/np.timedelta64(1,'Y'), 1)\nuk_mps_df.to_csv('data/uk_mps_dataframe.csv', index=False)\nuk_mps_df \n\n\n\nGreat! It works\nNow we get a dataframe of all the sitting MPs birthday date, party, alma mater and name:\n\n\nUK Data Visualisations and Analysis\n‚Ä¢¬†Clearly we have some missing values for university (problems with the wikipedia page not containing this information) therefore births analysis will be limited to MPs for whom birth data is available.\n‚Ä¢ University analysis will be limited to university-attendees where data is available so 570 out of the 650\n‚Ä¢ We use UN data for UK comparison\n\n\nCode\n# UN Births Data for UK for comparison\nUN_births_data=pd.read_csv('data/Births Data UN.csv')\nUN_births_data.drop(['Area', 'Record Type', 'Value Footnotes', 'Source Year'],axis=1,inplace=True)\nUN_births_data=UN_births_data.query(\"Month in ['January','February','March','April','May','June','July','August','September','October','November','December']\")\n# I want a subset of UN_births_data for the UK only\nUK_UN_births_data = UN_births_data.loc[UN_births_data['Country or Area'] == 'United Kingdom of Great Britain and Northern Ireland']\n# We have data for the period 1982 to 2020, which is acceptable\nUK_UN_births_data = UK_UN_births_data.groupby('Month').sum()[['Value']].reindex(['January','February','March','April','May','June','July','August','September','October','November','December'])\nUK_UN_births_data.index=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\nUK_UN_births_data['uk_population_births_percentage']=(UK_UN_births_data['Value']/UK_UN_births_data['Value'].sum()*100).round(2)\nUK_UN_births_data.rename(columns={'Value':'uk_un_births_count'},inplace=True)\nUK_UN_births_data \n\nmonthly_mp_data=uk_mps_df.groupby(uk_mps_df['birth date'].dt.month).count()[['name']]\nmonthly_mp_data.index=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\nmonthly_mp_data['uk_mps_births_percentage']=(monthly_mp_data['name']/monthly_mp_data['name'].sum()*100).round(2)\nmonthly_mp_data.rename(columns={'name':'uk_mp_count'},inplace=True)\nmonthly_mp_data \n\n# Preparing data for visualisation\nmerged_uk_df = pd.merge(monthly_mp_data,UK_UN_births_data,how='left',left_index=True,right_index=True)\nmerged_uk_df['percentage_difference'] = (merged_uk_df['uk_mps_births_percentage'] - merged_uk_df['uk_population_births_percentage'])/merged_uk_df['uk_population_births_percentage']*100\nmerged_uk_df.index=pd.Categorical(merged_uk_df.index, categories=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'], ordered=True)\n\n\n\n\nAge Distribution of UK MPs\n\n\n\nCode\n# I want to plot the percentages of the number of UK MPs born in each month and the percentage of the UK population born in each month\n# Plotnine requires a dataframe in long format for double bar plot\n\n# # Older implementation using matplotlib\n# merged_uk_df['month'] = merged_uk_df.index\n# merged_uk_df['month'] = pd.Categorical(merged_uk_df['month'], categories=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'], ordered=True)\n# merged_uk_df.plot(x='month', y=['uk_mps_births_percentage','uk_population_births_percentage'], legend=True, kind='bar', title='UK MP births per month (%) vs UK births per month (%)', figsize=(15,10), color=['blue', 'green'])\n# plt.show() \n\n\n# Plot the ages of MPs as a histogram\nggplot(uk_mps_df,aes(x='age')) \\\n    + geom_histogram(binwidth=2, fill='blue', color='white') \\\n    + labs(title='Figure 1: Age distribution of UK MPs',x='Age',y='Count') \\\n    + theme(figure_size=(15,10)) \\\n    + scale_x_continuous(breaks=range(0,100,5)) \n\n\n\n\nCode\nprint(f'The average age of a UK MP is {round(uk_mps_df[\"age\"].mean(),1)} years old.') \n\n\nThe average age of a UK MP is 53.3 years old.\n\n\n\nWe would expect most MPs to be in this age interval.\n\n\nAs expected, age follows a normal distribution with a mean centred around 53.3\n\n\nUK Politician‚Äôs Birth Month\n\n\n\nCode\n# Percentage difference plot\nggplot(merged_uk_df,aes(x='merged_uk_df.index',y='percentage_difference', fill='percentage_difference')) \\\n    + geom_bar(stat='identity') \\\n    + labs(title='Figure 2: Percentage difference between MP birth month proportions and population data',x='Month',y='Percentage Difference') \\\n    + scale_fill_gradient(low='red',high='green', breaks=[0]) \\\n    + theme(figure_size=(10,5), legend_position='none')\n\n\n\n\n\n\n\nCode\nplot_df=pd.concat([merged_uk_df[['uk_mps_births_percentage']].rename(columns={'uk_mps_births_percentage':'percentage'})\\\n                   ,merged_uk_df[['uk_population_births_percentage']].rename(columns={'uk_population_births_percentage':'percentage'})],axis=0).reset_index()\nplot_df['Category']=['MPs' if i&lt;12 else 'Population' for i in range(24)]\nggplot(plot_df,aes(x='index',y='percentage',fill='Category'))\\\n    + geom_hline(yintercept=8.33, linetype='dashed', color='black') \\\n    + geom_bar(stat='identity', position='dodge', width=0.5) \\\n    + labs(x='Month', y='Percentage', title='Figure 3: UK MP births per month (%) vs UK births per month (%)') \\\n    + theme(figure_size=(10, 5))\\\n    + scale_fill_manual(values=['blue','green']) \n\n\n\n\n\n\nLooking at Figure 2, we observe that the trends we saw in politicians being born in the first six months, don‚Äôt necessarily hild here.\n\n\nAlthough people born in March and April i.e initial months in the year are relatively higher than the rest, so are results for being born in September and August serving as a counterexample for a clear generalizable trend. However considering that the schooling system in Britain starts from September the earlier explanation of the relative age effect might still be at play. Specifically, the advantage of being born earlier in terms of maturity and development might improve the likelihood of future opportunities such as pursuing a career in politics, explaining why a much higher percentage of politicians 9.51 and 9.35 are born in August and September respectively. However, this is conflicting considering that the results are similar for March and April, 9.19 and 9.03 where the same reasoning doesn‚Äôt hold.\n\n\nUniversity\n\nWe rank the universities by the count of MPs who attended and what percentage of all MPs attended the university:\n\n\nCode\n\nuniversities_list = pd.DataFrame(uk_mps_df['university'])\nuniversities_list.dropna(inplace=True)\n# Currently LSE is most common, but the colleges in cambridge and oxford should not be counted as separate universities\n# I want to create a dataframe of only values from the universities_list that satisfy the regex search for 'Oxford$'\noxford = universities_list[universities_list['university'].str.contains('Oxford$')]\noxford\n# I want to create a dataframe of only values from the universities_list that satisfy the regex search for 'Cambridge|St. John'\ncambridge = universities_list[universities_list['university'].str.contains('Cambridge|St. John')]\ncambridge\n\n# I want to correct for other variants of names\nuniversities_list.loc[universities_list['university'].str.contains('London School of Economics'), 'university'] = 'London School of Economics'\n\n# I want to replace all values in the universities_list dataframe that are also present in the oxford dataframe with 'University of Oxford'\nuniversities_list.loc[universities_list['university'].isin(oxford['university']), 'university'] = 'University of Oxford'\n\n# I want to replace all values in the universities_list dataframe that are also present in the cambridge dataframe with 'University of Cambridge'\nuniversities_list.loc[universities_list['university'].isin(cambridge['university']), 'university'] = 'University of Cambridge'\n\nuniversities_ranked = pd.DataFrame(universities_list.value_counts()).reset_index()\nuniversities_ranked.rename(columns={0:'count', 'university':'university'},inplace=True)\nuniversities_ranked['percentage'] = (universities_ranked['count']/universities_ranked['count'].sum()*100).round(2)\nuniversities_ranked.rename(columns={'count':'number of MPs'},inplace=True)\nuniversities_ranked\n# Now Oxford and Cambridge are correctly represented \n\n\n\n\n\n\n\n\n\nuniversity\nnumber of MPs\npercentage\n\n\n\n\n0\nUniversity of Oxford\n76\n14.99\n\n\n1\nUniversity of Cambridge\n46\n9.07\n\n\n2\nLondon School of Economics\n19\n3.75\n\n\n3\nUniversity of Edinburgh\n12\n2.37\n\n\n4\nUniversity of Glasgow\n12\n2.37\n\n\n...\n...\n...\n...\n\n\n118\nNewcastle Polytechnic\n1\n0.20\n\n\n119\nMoray House College of Education\n1\n0.20\n\n\n120\nLondon South Bank University\n1\n0.20\n\n\n121\nLondon Metropolitan University\n1\n0.20\n\n\n122\nWrexham Glynd≈µr University\n1\n0.20\n\n\n\n\n123 rows √ó 3 columns\n\n\n\n\nWhat university did most politicians attend in the UK?\n\n\n\nCode\n# Top 10 universities attended by MPs, plotted with multiple colours\n\nuniversities_ranked['university'] = pd.Categorical(universities_ranked['university'], categories=universities_ranked['university'], ordered=True)\n\n# Create the plot using plotnine\nplot = (\n    ggplot(universities_ranked.head(10), aes(x='university', y='number of MPs', fill='university')) +\n    geom_bar(stat='identity', width=0.5) +\n    labs(title='Figure 4: Top 10 universities attended by MPs', x='University', y='Number of MPs') +\n    scale_fill_manual(values=['blue', 'cyan', 'red', 'gold', 'black', 'deeppink', 'violet', 'olive', 'tomato', 'grey']) +\n    theme(figure_size=(10, 6), legend_position='none', axis_text_x=element_text(rotation=90)) +\n    scale_y_continuous(breaks=range(0, 100, 10))\n)\nplot\n\n\n\nAs we can tell from Figure 4, there is a clear indication of the most frequently attended university of UK politicians - University of Oxford.\n\n    75 of politicians attended Oxford \n\nOther universities are not even close to competing with Oxford, not even LSE!\n\n\n\nCode\n# Plotnine does not support coord_polar of ggplot yet, so we will have to use matplotlib\n# In the worst case we can use a stacked bar chart or some other alternative\n\nimport matplotlib.pyplot as plt\nuniversities_ranked.plot(x=\"university\", y=\"percentage\", kind='pie', title='Figure 5: Oxbridge Domination', figsize=(15,10), colors=['blue','cyan','red','orange','purple','yellow','pink','brown','grey','black','green','lightblue','lightgreen','lightgrey','lightpink'], labels=None, ylabel=None, xlabel=None, startangle=90, counterclock=True, legend=False)\nplt.show() \noxford_percentage = universities_ranked.loc[universities_ranked['university'] == 'University of Oxford', 'percentage'].values[0]\nprint('Oxford percentage: ' + str(oxford_percentage) + '%')\n\ncambridge_percentage = universities_ranked.loc[universities_ranked['university'] == 'University of Cambridge', 'percentage'].values[0]\nprint('Cambridge percentage: ' + str(cambridge_percentage) + '%')\n\noxbridge_percentage = (universities_list.value_counts()[0:2].sum()/universities_list.value_counts().sum()*100).round(1)\nprint('Oxbridge percentage: ' + str(oxbridge_percentage) + '%')\n\nlse_percentage = universities_ranked.loc[universities_ranked['university'] == 'London School of Economics', 'percentage'].values[0]\nprint('LSE percentage: ' + str(lse_percentage) + '%') \n\n\n\n\n\n\nOxford percentage: 14.99%\nCambridge percentage: 9.07%\nOxbridge percentage: 24.1%\nLSE percentage: 3.75%\n\n\nOxbridge have clearly dominated the politician alma mater. Is there something else at play here?\nNevertheless, we have shown that a significant propotion of politicians have attended elite universities, it is now the job of the economists and political scientits to determine how significant of a problem this is for the governing of the state!"
  },
  {
    "objectID": "pol_rep.html",
    "href": "pol_rep.html",
    "title": "Factors affecting political representation",
    "section": "",
    "text": "Exploring biographical factors affecting political representation\nWe explore various factors that may affect political representation: \n\nBirth Month & Relative Age Effect üìÖ\n\n\n\nFirst Letter & Length of Name üî°\n\n\nDay of Birth üìÜ\n\n\nUniversity Education: UK only üéì\n\n\nAge - UK only üë¥\n\n\nZodiac (for entertainment purposes only) üòÜ"
  },
  {
    "objectID": "data_coll.html",
    "href": "data_coll.html",
    "title": "Data Collection and Cleaning",
    "section": "",
    "text": "Beyond the initial data cleaning expected to make the dataset usable in analysis, we needed to perform some operations before the EveryPolitician dataset was fit for purpose.\n\n1. Get index file with links to all country datasets\n\n\n233\n\n\nThis is the function to get the country and legislature wide data\n\n\n2. Creating a dataframe for all countries\n\n\n\n\n\n\n\n\n\ngender\nid\nidentifiers\nimage\nimages\nname\nbirth_date\nlinks\nother_names\ngiven_name\n...\ncontact_details\nfamily_name\ndeath_date\nemail\nsort_name\nhonorific_prefix\nhonorific_suffix\nnational_identity\nsummary\npatronymic_name\n\n\n\n\n0\nfemale\n0a93b26d-ebc5-44f5-b4fa-935ae209620f\n[{'identifier': '127', 'scheme': 'everypolitic...\nhttp://www.parlamentra.org/upload/iblock/d1a/g...\n[{'url': 'http://www.parlamentra.org/upload/ib...\n–ì–∞–º–∏—Å–æ–Ω–∏—è –≠–º–º–∞ –ê–ª–µ–∫—Å–µ–µ–≤–Ω–∞\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\nmale\n0ac7e64e-b723-4bdb-85f6-81ff217a70fa\n[{'identifier': '211', 'scheme': 'everypolitic...\nhttp://www.parlamentra.org/upload/iblock/4dd/I...\n[{'url': 'http://www.parlamentra.org/upload/ib...\n–ë–∞—Ä–≥–∞–Ω–¥–∂–∏—è –ì—É—Ä–∞–º –Æ—Ä—å–µ–≤–∏—á\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2\nmale\n0b515281-445d-49dd-9044-d886d85f0970\n[{'identifier': '157', 'scheme': 'everypolitic...\nhttp://www.parlamentra.org/upload/iblock/244/c...\n[{'url': 'http://www.parlamentra.org/upload/ib...\n–ß–∞–º–∞–≥—É–∞ –õ–µ–æ–Ω–∏–¥ –ú–∏—Ö–∞–π–ª–æ–≤–∏—á\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\nmale\n12d1a33c-daa4-496c-965a-4cd4749eda78\n[{'identifier': '130', 'scheme': 'everypolitic...\nhttp://www.parlamentra.org/upload/iblock/c3b/t...\n[{'url': 'http://www.parlamentra.org/upload/ib...\n–¶–≤–∏–∂–±–∞ –û—Ç–∞—Ä–∏ –®–æ—Ç–æ–≤–∏—á\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nmale\n15a55ab3-c81c-4f5f-ae75-ea5446dd5ef6\n[{'identifier': '138', 'scheme': 'everypolitic...\nhttp://www.parlamentra.org/upload/iblock/30b/y...\n[{'url': 'http://www.parlamentra.org/upload/ib...\n–Ø–∑—ã—á–±–∞ –ó–∞—É—Ä –ì–∞–π–¥–∞—Ä–æ–≤–∏—á\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n55\nmale\ned4838aa-19f8-493c-b8c4-58780b5b0d84\n[{'identifier': '112', 'scheme': 'everypolitic...\nhttp://www.lagtinget.ax/files/sjolund_folke.jpg\n[{'url': 'http://www.lagtinget.ax/files/sjolun...\nSj√∂lund Folke\n1943-12-16\n[{'note': 'Wikipedia (fi)', 'url': 'https://fi...\n[{'lang': 'en', 'name': 'Folke Sj√∂lund', 'note...\nFolke\n...\nNaN\nSj√∂lund\n2013-12-13\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n56\nmale\nf105a4a0-5fef-4be7-ab73-9376923491a7\nNaN\nhttps://www.lagtinget.ax/sites/www.lagtinget.a...\n[{'url': 'https://www.lagtinget.ax/sites/www.l...\nJohn Holmberg\n1967\nNaN\nNaN\nNaN\n...\n[{'type': 'email', 'value': 'john.holmberg@lag...\nNaN\nNaN\njohn.holmberg@lagtinget.ax\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n57\nmale\nf4f995ae-126c-468f-8f26-deec1e26adc2\n[{'identifier': '372', 'scheme': 'everypolitic...\nhttp://www.lagtinget.ax/files/asumaa_tony.jpg\n[{'url': 'http://www.lagtinget.ax/files/asumaa...\nAsumaa Tony\n1968-09-15\n[{'note': 'Wikipedia (en)', 'url': 'https://en...\n[{'lang': 'en', 'name': 'Tony Asumaa', 'note':...\nTony\n...\nNaN\nAsumaa\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n58\nmale\nfe40bb08-5025-473d-af52-bf1e30ecc5e6\n[{'identifier': '88', 'scheme': 'everypolitici...\nhttp://www.lagtinget.ax/files/sundblom_torsten...\n[{'url': 'http://www.lagtinget.ax/files/sundbl...\nSundblom Torsten\n1951-09-15\n[{'note': 'Wikipedia (fi)', 'url': 'https://fi...\n[{'lang': 'en', 'name': 'Torsten Sundblom', 'n...\nTorsten\n...\n[{'type': 'email', 'value': 'torsten.sundblom@...\nNaN\nNaN\ntorsten.sundblom@lagtinget.ax\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n59\nmale\nff7b67a7-d3bf-4179-801d-7005059524e6\nNaN\nhttps://www.lagtinget.ax/sites/www.lagtinget.a...\n[{'url': 'https://www.lagtinget.ax/sites/www.l...\nFredrik Fredlund\n1978\nNaN\nNaN\nNaN\n...\n[{'type': 'email', 'value': 'fredrik.fredlund@...\nNaN\nNaN\nfredrik.fredlund@lagtinget.ax\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n78382 rows √ó 21 columns\n\n\n\n\n\n3. Filtering the data for the January Skew\n\nInitially, the proportion of politicians with a January birthday was more than 4 times greater than any of the other months. Upon deeper analysis, this was attributed to the standardised value of 1 January being assigned to politicians for which birth month data was not available (as the pd.to_datetime function defaulted to this when no day/month information is provided). We identified this phenomenon as the January skew.\n\nFinding all records of 1st January\n\nAfter exploring a few methods to address this, we chose to omit outlier countries that had an unreasonable number of 1 Jan values. The threshold for the omission was computed by excluding countries where the ratio of records on January 1st was more than 10 times the expected ratio of records for Jan 1st - seven countries for which this threshold was violated were excluded from the analysis, including Syria and Cameroon for which the proportion of people born on 1 January were 98.2% and 26.8% respectively.\n\nFinding countries with high ratio of 1st Jan births\nExcluding countries with &gt;10 times expected ratio of 1st Jan and &gt;10 records\n\n\n\n\n\n\n\n\n\n1 Jan\nTotal\nPercentage\n\n\ncountry\n\n\n\n\n\n\n\nBangladesh\n18\n549\n3.278689\n\n\nCameroon\n286\n1064\n26.879699\n\n\nPakistan\n32\n352\n9.090909\n\n\nSyria\n269\n274\n98.175182\n\n\nTurkey\n397\n6899\n5.754457\n\n\nYemen\n15\n302\n4.966887\n\n\n\n\n\n\n\nThis differs greatly from the global proportion of 8.97% of births in January. Hence such results were removed from our birth month analysis to safeguard data quality, and then we were able to perform our analyses.\n\n4. Saving the included the data\n\n\n\n\n\n\n\n\n\ngender\nid\nidentifiers\nimage\nimages\nname\nbirth_date\nlinks\nother_names\ngiven_name\n...\ncontact_details\nfamily_name\ndeath_date\nemail\nsort_name\nhonorific_prefix\nhonorific_suffix\nnational_identity\nsummary\npatronymic_name\n\n\n\n\n8\nmale\n34352d83-6fa1-463d-a02f-6157b3adf36b\n[{'identifier': '141', 'scheme': 'everypolitic...\nhttp://www.parlamentra.org/upload/iblock/bfe/u...\n[{'url': 'http://www.parlamentra.org/upload/ib...\n–£–±–∏—Ä–∏—è –ë–µ–∂–∞–Ω –ú–∏—Ö–∞–π–ª–æ–≤–∏—á\n1967-03-07\n[{'note': 'Wikipedia (ru)', 'url': 'https://ru...\n[{'name': '–ë–µ–∂–∞–Ω –£–±–∏—Ä–∏–∞', 'note': 'alternate'}...\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n19\nmale\n9fd33b27-fd4c-4eba-9a8f-d4d23f603c63\n[{'identifier': '/m/03fqqs', 'scheme': 'freeba...\nhttp://www.parlamentra.org/upload/iblock/e1f/s...\n[{'url': 'http://www.parlamentra.org/upload/ib...\n–®–∞–º–±–∞ –°–µ—Ä–≥–µ–π –ú–∏—Ä–æ–Ω–æ–≤–∏—á\n1951-03-15\n[{'note': 'Wikipedia (ab)', 'url': 'https://ab...\n[{'lang': 'ab', 'name': '–°–µ—Ä–≥–µ–∏ –®–∞–º–±–∞', 'note'...\nSergey\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n28\nmale\nda988bab-32d4-46c0-bb7b-5c6a6eb129e7\n[{'identifier': '46', 'scheme': 'everypolitici...\nhttp://www.parlamentra.org/upload/iblock/b85/%...\n[{'url': 'http://www.parlamentra.org/upload/ib...\n–ë–≥–∞–Ω–±–∞ –í–∞–ª–µ—Ä–∏–π –†–∞–º—à—É—Ö–æ–≤–∏—á\n1953-08-26\n[{'note': 'Wikimedia Commons', 'url': 'https:/...\n[{'lang': 'cs', 'name': 'Valerij Bganba', 'not...\nValeri\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n78\nfemale\n522dff9d-d21d-41b9-a7d5-c2321c819b11\n[{'identifier': '1854', 'scheme': 'everypoliti...\nhttp://www.wolesi.website/Media/Images/mine/fa...\n[{'url': 'http://www.wolesi.website/Media/Imag...\nFarkhunda Zahra Naderi-Kabul\n1981-04-19\n[{'note': 'Wikimedia Commons', 'url': 'https:/...\n[{'lang': 'en', 'name': 'Farkhunda Zahra Nader...\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n172\nfemale\naac6f415-446d-4070-80d9-195d4f7b77ac\n[{'identifier': '1823', 'scheme': 'everypoliti...\nhttp://www.wolesi.website/Media/Images/mine/ra...\n[{'url': 'http://www.wolesi.website/Media/Imag...\nRangina Kargar-Faryab\n1985-03-22\n[{'note': 'Wikimedia Commons', 'url': 'https:/...\n[{'lang': 'en', 'name': 'Rangina Kargar', 'not...\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n51\nfemale\ne57828f1-e51a-41ea-a61b-7fc1b92e2b37\n[{'identifier': '109', 'scheme': 'everypolitic...\nhttp://www.lagtinget.ax/files/dahl_ulla_britt.jpg\n[{'url': 'http://www.lagtinget.ax/files/dahl_u...\nDahl Ulla-Britt\n1946-03-14\n[{'note': 'Wikipedia (fi)', 'url': 'https://fi...\n[{'lang': 'en', 'name': 'Ulla-Britt Dahl', 'no...\nUlla-Britt\n...\nNaN\nDahl\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n52\nmale\ne6f6e01b-bcb0-4374-8912-7e1eaf492f10\n[{'identifier': '97', 'scheme': 'everypolitici...\nhttp://www.lagtinget.ax/files/lindfors_henry.jpg\n[{'url': 'http://www.lagtinget.ax/files/lindfo...\nLindstr√∂m Henry\n1956-06-20\n[{'note': 'Wikipedia (fi)', 'url': 'https://fi...\n[{'lang': 'en', 'name': 'Henry Lindstr√∂m', 'no...\nHenry\n...\nNaN\nLindstr√∂m\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n55\nmale\ned4838aa-19f8-493c-b8c4-58780b5b0d84\n[{'identifier': '112', 'scheme': 'everypolitic...\nhttp://www.lagtinget.ax/files/sjolund_folke.jpg\n[{'url': 'http://www.lagtinget.ax/files/sjolun...\nSj√∂lund Folke\n1943-12-16\n[{'note': 'Wikipedia (fi)', 'url': 'https://fi...\n[{'lang': 'en', 'name': 'Folke Sj√∂lund', 'note...\nFolke\n...\nNaN\nSj√∂lund\n2013-12-13\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n57\nmale\nf4f995ae-126c-468f-8f26-deec1e26adc2\n[{'identifier': '372', 'scheme': 'everypolitic...\nhttp://www.lagtinget.ax/files/asumaa_tony.jpg\n[{'url': 'http://www.lagtinget.ax/files/asumaa...\nAsumaa Tony\n1968-09-15\n[{'note': 'Wikipedia (en)', 'url': 'https://en...\n[{'lang': 'en', 'name': 'Tony Asumaa', 'note':...\nTony\n...\nNaN\nAsumaa\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n58\nmale\nfe40bb08-5025-473d-af52-bf1e30ecc5e6\n[{'identifier': '88', 'scheme': 'everypolitici...\nhttp://www.lagtinget.ax/files/sundblom_torsten...\n[{'url': 'http://www.lagtinget.ax/files/sundbl...\nSundblom Torsten\n1951-09-15\n[{'note': 'Wikipedia (fi)', 'url': 'https://fi...\n[{'lang': 'en', 'name': 'Torsten Sundblom', 'n...\nTorsten\n...\n[{'type': 'email', 'value': 'torsten.sundblom@...\nNaN\nNaN\ntorsten.sundblom@lagtinget.ax\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n41381 rows √ó 21 columns"
  },
  {
    "objectID": "birth_month.html",
    "href": "birth_month.html",
    "title": "Exploring Birth Month",
    "section": "",
    "text": "To explore whether there is a relative age effect in politics, we decided to explore the birth months of politicians to investigate for any trends.\n\n\nMP‚Äôs and their birth month\n\n\n\nWe first graph MPs and their birth month to understand the average densities of politicians for each month of the year.\n\n\nAs you can see from the Figure 1, a greater proportion of politicians are born in the first six months of the year.\n\n\n\nCode\nimport pandas as pd\nfrom plotnine import * \n\ndata=pd.read_csv('data/data_included.csv')\ndata['birth_date']=pd.to_datetime(data['birth_date'], errors='coerce')\n\n# Create a dataframe with MPs by month\nmonthly_df=data.groupby(data['birth_date'].dt.month).count()[['name']]\nmonthly_df.index=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\nmonthly_df['percentage']=(monthly_df['name']/monthly_df['name'].sum()*100).round(2)\nmonthly_df.rename(columns={'name':'count'},inplace=True)\n# monthly_df\n\n# Read data file and remove unnecessary columns & records\nimport pandas as pd\nbirths_data=pd.read_csv('data/Births Data UN.csv')\nbirths_data.drop(['Area', 'Record Type', 'Value Footnotes', 'Source Year'],axis=1,inplace=True)\nbirths_data=births_data.query(\"Month in ['January','February','March','April','May','June','July','August','September','October','November','December']\")\n\n# Groupby month and sum births\nbirths_df=births_data.groupby('Month').sum()[['Value']]\nbirths_df=births_df.reindex(['January','February','March','April','May','June','July','August','September','October','November','December'])\nbirths_df.index=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\nbirths_df['births_percentage']=(births_df['Value']/births_df['Value'].sum()*100).round(2)\nbirths_df.rename(columns={'Value':'births_count'},inplace=True)\n\nbirths_df.drop(['births_count'],axis=1,inplace=True) \n# births_df \n\ndf=pd.merge(monthly_df,births_df,how='inner',left_index=True,right_index=True)\ndf['percentage']=(df['count']/df['count'].sum()*100).round(2)\ndf['difference']=df['percentage']-df['births_percentage']\ndf['pc_difference']=df['difference']/df['births_percentage']*100\ndf['pc_difference']=df['pc_difference'].round(2)\ndf.index=pd.CategoricalIndex(df.index, categories=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'], ordered=True)\n# df\n# from UN_monthly_births import births_df\n# try:\n#     births_df.drop(['births_count'],axis=1,inplace=True)\n# except:\n#     births_df\n# births_df\n\ndf_for_double_plot=pd.concat([df[['percentage']], df[['births_percentage']].rename(columns={'births_percentage':'percentage'})], axis=0).reset_index()\ndf_for_double_plot['category']=['MPs' if x&lt;12 else 'Births' for x in range(24)]\n# df_for_double_plot\n\n# Double bar plot in plotnine\nggplot(df_for_double_plot, aes(x='index', y='percentage', fill='category')) \\\n    + geom_hline(yintercept=8.33, linetype='dashed', color='black') \\\n    + geom_bar(stat='identity', position='dodge', width=0.7) \\\n    + labs(x='Month', y='Percentage', title='MPs vs Births by Month') \\\n    + theme(figure_size=(10, 5)) \n\n# this is where i need to put the code for the MPs vs Birth Month picture \n\n\n\nThis trend was noticed from Figure 2, which compares politicians birth month to population data to population birth month data collected from the UN databases.\n\n\n\nCode\n#  Percentage difference plot\nggplot(df,aes(x='df.index',y='pc_difference', fill='pc_difference')) \\\n    + geom_bar(stat='identity') \\\n    + labs(title='Percentage difference',x='Month',y='Percentage') \\\n    + scale_fill_gradient(low='red',high='green', breaks=[0]) \\\n    + theme(figure_size=(10,5))\n\n\n\n\n\n\n\nCode\nggplot(df,aes(x='df.index',y='percentage')) \\\n    + geom_bar(stat='identity', fill='#FF8844') \\\n    + labs(title='MPs by month',x='Month',y='Percentage') \\\n    + geom_hline(yintercept=8.33,linetype='dashed',color='blue') \\\n    + theme(figure_size=(10,5))\n\n\n\n\n\n\nAs an observation, we notice a 3.43% difference across politician birth month data for the first six months of the year. Compared to the last six months of the year, we notice a -3.32% difference.\n\n\nThe relative age effect could be explanatory here. Politicians born in the first six months may have an advantage in education, leadership, and experience. This is because, for a school system that starts in September, those born in the first six months of the year will be in the school year above those born in the last six months of the year. However, these are just observed trends, hence we cannot make any conclusions.\n\n\n\nComparing to developing countries\n\n\n\nSince we observed trends in birth month and politician density, we decided to investigate whether this differed between developing and developed countries.\n\n\nTo do this we used the Human Development Index (HDI), scraping data from the UN databases. We define a developing country as one with a low HDI, specifically an index of less than 0.7.\n\n\n\nCode\nimport utils \n\n\n# '''This module contains utility functions, variables, and data structures for use in the notebooks.'''\n\nimport pandas as pd\n\n#------------------------------------Top and bottom countries of indices------------------------------------\n\n# UN Indices Data:\nindices_data=pd.read_csv('data/UN HDR all indices data.csv')\nindices_data=indices_data[['country','hdi_2021','le_2021','eys_2021','mys_2021','gnipc_2021', 'gdi_2021','ihdi_2021','coef_ineq_2021','region', 'gii_2021']]\n\nhigh_hdi=indices_data[indices_data['hdi_2021']&gt;0.8]['country'].tolist()\nlow_hdi=indices_data[indices_data['hdi_2021']&lt;0.7]['country'].tolist()\n\ntop_50_mys=indices_data.sort_values(by=['mys_2021'], ascending=False).head(50)['country'].tolist()\nbottom_50_mys=indices_data.sort_values(by=['mys_2021'], ascending=True).head(50)['country'].tolist()\n\ntop_gii=indices_data.sort_values(by=['gii_2021'], ascending=False).head(20)['country'].tolist()\nbottom_gii=indices_data.sort_values(by=['gii_2021'], ascending=True).head(20)['country'].tolist()\n\n#------------------------------------Income groups------------------------------------\n\n# World Bank Data:\nwb_data=pd.read_csv('data/income_data.csv')\n\nlow_income=wb_data[wb_data['Income group']=='Low income']['Country'].tolist()\nhigh_income=wb_data[wb_data['Income group']=='High income']['Country'].tolist()\n\n#------------------------------------V-Dem Electoral Democracy Score------------------------------------\nvdem_data=pd.read_csv('data/v_dem_elec_democracy.csv')\nvdem_data=vdem_data.query('Year==2022')\n\nlow_dem=vdem_data[vdem_data['electdem_vdem_owid']&lt;0.4]['Entity'].tolist()\nhigh_dem=vdem_data[vdem_data['electdem_vdem_owid']&gt;0.8]['Entity'].tolist()\n\n#------------------------------------Hemispheres------------------------------------\n\n#north_hem=['Algeria', 'Benin', 'Burkina Faso', 'Burundi', 'Cameroon', 'Central African Republic', 'Chad', 'Comoros', 'Djibouti', 'Egypt', 'Equatorial Guinea', 'Eritrea', 'Ethiopia', 'Gabon', 'Gambia', 'Ghana', 'Guinea', 'Guinea-Bissau', 'Ivory Coast', 'Kenya', 'Liberia', 'Libya', 'Mali', 'Mauritania', 'Niger', 'Nigeria', 'Rwanda', 'Senegal', 'Sierra Leone', 'Somalia', 'South Sudan', 'Sudan', 'Tanzania', 'Togo', 'Tunisia', 'Uganda', 'Zambia', 'Zimbabwe', 'Afghanistan', 'Armenia', 'Azerbaijan', 'Bahrain', 'Bangladesh', 'Bhutan', 'Brunei', 'Cambodia', 'China', 'Cyprus', 'Georgia', 'India', 'Indonesia', 'Iran', 'Iraq', 'Israel', 'Japan', 'Jordan', 'Kazakhstan', 'Kuwait', 'Kyrgyzstan', 'Laos', 'Lebanon', 'Malaysia', 'Maldives', 'Mongolia', 'Myanmar', 'Nepal', 'North Korea', 'Oman', 'Pakistan', 'Palestine', 'Philippines', 'Qatar', 'Russia', 'Saudi Arabia', 'Singapore', 'South Korea', 'Sri Lanka', 'Syria', 'Taiwan', 'Tajikistan', 'Thailand', 'Turkey', 'Turkmenistan', 'United Arab Emirates', 'Uzbekistan', 'Vietnam', 'Albania', 'Andorra', 'Austria', 'Belarus', 'Belgium', 'Bosnia and Herzegovina', 'Bulgaria', 'Croatia', 'Czech Republic', 'Denmark', 'Estonia', 'Finland', 'France', 'Germany', 'Greece', 'Hungary', 'Iceland', 'Ireland', 'Italy', 'Latvia', 'Liechtenstein', 'Lithuania', 'Luxembourg', 'Macedonia', 'Malta', 'Moldova', 'Monaco', 'Montenegro', 'Netherlands', 'North Macedonia', 'Norway', 'Poland', 'Portugal', 'Romania', 'San Marino', 'Serbia', 'Slovakia', 'Slovenia', 'Spain', 'Sweden', 'Switzerland', 'Vatican City', 'Antigua and Barbuda', 'Bahamas', 'Barbados', 'Belize', 'Canada', 'Costa Rica', 'Cuba', 'Dominica', 'Dominican Republic', 'El Salvador', 'Grenada', 'Guatemala', 'Haiti', 'Honduras', 'Jamaica', 'Mexico', 'Nicaragua', 'Panama', 'Saint Kitts and Nevis', 'Saint Lucia', 'Saint Vincent and the Grenadines', 'Trinidad and Tobago', 'United States of America', 'Oceania', 'Fiji', 'Kiribati', 'Marshall Islands', 'Micronesia', 'Nauru', 'New Zealand', 'Palau', 'Papua New Guinea', 'Samoa', 'Solomon Islands', 'Tonga', 'Tuvalu', 'Vanuatu']\n\ncountries=pd.read_csv('data/countries.csv',encoding='latin-1')\nnorth_hem=countries[countries['latitude']&gt;0]['name'].tolist()\nsouth_hem=countries[countries['latitude']&lt;0]['name'].tolist()\n\n#------------------------------------Gender quotas------------------------------------\n\nquotas_df=pd.read_csv('data/gender_quotas.csv')\nlegal_quotas=quotas_df[quotas_df['Voluntary political party quotas']=='No']['Country'].tolist()\n\ntop_hdi=data.query('country in @high_hdi')\ntop_hdi_monthly=top_hdi.groupby(data['birth_date'].dt.month).count()[['name']]\nbottom_hdi=data.query('country in @low_hdi')\nbottom_hdi_monthly=bottom_hdi.groupby(data['birth_date'].dt.month).count()[['name']]\n\nmonthly_df=pd.merge(top_hdi_monthly,bottom_hdi_monthly,how='inner',left_index=True,right_index=True)\nmonthly_df.rename(columns={'name_x':'top_hdi','name_y':'bottom_hdi'},inplace=True)\nmonthly_df['top_hdi_percentage']=(monthly_df['top_hdi']/monthly_df['top_hdi'].sum()*100).round(2)\nmonthly_df['bottom_hdi_percentage']=(monthly_df['bottom_hdi']/monthly_df['bottom_hdi'].sum()*100).round(2)\nmonthly_df.index=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\nmonthly_df.index=pd.Categorical(monthly_df.index,categories=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'],ordered=True)\n# monthly_df  \n\n\n\n# Create a double bar plot for hdi analysis\nhdi_plot_df=pd.concat([monthly_df[['top_hdi_percentage']].rename(columns={'top_hdi_percentage':'percentage'})\\\n                   ,monthly_df[['bottom_hdi_percentage']].rename(columns={'bottom_hdi_percentage':'percentage'})],axis=0).reset_index()\nhdi_plot_df['group']=['HDI&gt;0.8' if i&lt;12 else 'HDI&lt;0.7' for i in range(24)]\nggplot(hdi_plot_df,aes(x='index',y='percentage',fill='group'))\\\n    + geom_bar(stat='identity', position='dodge', width=0.7) \\\n    + labs(x='Month', y='Percentage', title='HDI&gt;0.8 vs HDI&lt;0.7') \\\n    + theme(figure_size=(10, 5))\n\n\n\n\n\n\n\nCode\nmonthly_df['difference']=monthly_df['top_hdi_percentage']-monthly_df['bottom_hdi_percentage']\nmonthly_df['pc_difference']=monthly_df['difference']/monthly_df['bottom_hdi_percentage']*100\nmonthly_df['pc_difference']=monthly_df['pc_difference'].round(2)\nmonthly_df\nggplot(monthly_df,aes(x=monthly_df.index,y='pc_difference', fill='pc_difference'))\\\n    + geom_hline(yintercept=0, linetype='dashed', color='black') \\\n    + geom_bar(stat='identity') \\\n    + labs(x='Month', y='Percentage', title='HDI&gt;0.8 compared to HDI&lt;0.7') \\\n    + theme(figure_size=(10, 5))\\\n    + scale_fill_gradient(low='red',high='blue')\n\n\n\n\n\n\nFrom this we observe no overall trends.\n\n\n‚Ä¢ There is a greater density of politicians born in January for countries with a low HDI\n\n\n‚Ä¢ However, all 39 African countries have a low HDI, except Mauritius, thus make up most of our dataset\n\n\n‚Ä¢ Most African countries start school in January, hence this could offer some explanation why we see these trends - but again, no definite conclusion\n\n\n\nMean Years of Schooling\n\n\nThese results are prevalent from Figure 4. This figure represents the mean years of schooling for each month of the year:\n\n\nCode\n# Analysis for mean years of schooling. Top 50 vs bottom 50 countries.\ntop_mys=data.query('country in @top_50_mys')\ntop_mys_monthly=top_mys.groupby(data['birth_date'].dt.month).count()[['name']]\nbottom_mys=data.query('country in @bottom_50_mys')\nbottom_mys_monthly=bottom_mys.groupby(data['birth_date'].dt.month).count()[['name']]\n\nmonthly_df=pd.merge(top_mys_monthly,bottom_mys_monthly,how='inner',left_index=True,right_index=True)\nmonthly_df.rename(columns={'name_x':'top_mys','name_y':'bottom_mys'},inplace=True)\nmonthly_df['top_mys_percentage']=(monthly_df['top_mys']/monthly_df['top_mys'].sum()*100).round(2)\nmonthly_df['bottom_mys_percentage']=(monthly_df['bottom_mys']/monthly_df['bottom_mys'].sum()*100).round(2)\nmonthly_df.index=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\nmonthly_df.index=pd.Categorical(monthly_df.index,categories=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'],ordered=True)\n# monthly_df\n\n# Create a double bar plot for MYS analysis\nmys_plot_df=pd.concat([monthly_df[['top_mys_percentage']].rename(columns={'top_mys_percentage':'percentage'})\\\n                   ,monthly_df[['bottom_mys_percentage']].rename(columns={'bottom_mys_percentage':'percentage'})],axis=0).reset_index()\nmys_plot_df['group']=['Top 50' if i&lt;12 else 'Bottom 50' for i in range(24)]\nggplot(mys_plot_df,aes(x='index',y='percentage',fill='group'))\\\n    + geom_bar(stat='identity', position='dodge', width=0.7) \\\n    + labs(x='Month', y='Percentage', title='Top 50 MYS vs Bottom 50 MYS') \\\n    + theme(figure_size=(10, 5)) \n\nmonthly_df['difference']=monthly_df['top_mys_percentage']-monthly_df['bottom_mys_percentage']\nmonthly_df['pc_difference']=monthly_df['difference']/monthly_df['bottom_mys_percentage']*100\nmonthly_df['pc_difference']=monthly_df['pc_difference'].round(2)\nmonthly_df\nggplot(monthly_df,aes(x=monthly_df.index,y='pc_difference', fill='pc_difference'))\\\n    + geom_hline(yintercept=0, linetype='dashed', color='black') \\\n    + geom_bar(stat='identity') \\\n    + labs(x='Month', y='Percentage', title='Top 50 MYS compared to Bottom 50 MYS') \\\n    + theme(figure_size=(10, 5))\\\n    + scale_fill_gradient(low='red',high='blue')\n\n\n\n\n\nThose born in January for the top 50 countries are 25% lower than the bottom 50 countries.\nHowever, we had some concerns about the quality of the data, specifically completeness of data entry for a number of low development countries\nSince we are avoiding making any strong conclusions or justifications for the observed patterns, we turn our focus on the UK in our later analysis, in the hope to observe related trends."
  },
  {
    "objectID": "index.html#our-motivations",
    "href": "index.html#our-motivations",
    "title": "Month Marginalisation: Is there a relative age effect in politics?",
    "section": "Our Motivations",
    "text": "Our Motivations\n\nPoliticians are the instrument of the government, they play an instrumental role in shaping the laws, policies, and decisions that govern our daily lives. The world has seen many politicans, from Conservatives to Liberals, Dictators to Democratics, but what determines who becomes a politician?\n\n\n\n\n\n\nüí° Is it possible that the explanation goes beyond the standard factors of education, party affiliations, and characteristics traits?\n\n\nüí° Is it possible that underlying factors that people completely overlook such as birth month have a bearing on who becomes a politician?\n\n\nüí° Are January babies more likely to rule the world?\n\nOur page will answer all of these questions and more - read further to find out‚Ä¶"
  },
  {
    "objectID": "Untitled-1.html",
    "href": "Untitled-1.html",
    "title": "The Overall Process",
    "section": "",
    "text": "We wanted to explore whether there is a relative age effect in politics like there is many other disciplines such as academia and sports.\n\n\nThis is important to investigate for policy reasons, for career reasons, and also just for interest\n\n\nBut how does one start to answer this question?\n\n\n\nCollecting Data\n\n\n\nThe data we wanted to collect:\n\n\n‚Ä¢¬†The name of every politician in as many countries as possible\n\n\n‚Ä¢¬†The birthday‚Äôs of each politician\n\n\n‚Ä¢¬†The country each politician was from\n\n\n‚Ä¢ The university each politician attended\n\n\nTo collect the data we needed, we combined various sources to ‚Äúput together‚Äù the database we could use for our analysis\n\n\nThis, as you could imagine, was harder than expected\n\n    We mainly used data from the following: \n\n‚Ä¢ EveryPolitician\n\n\n‚Ä¢¬†UN Database\n\n\n‚Ä¢¬†Wikipedia\n\n\n‚Ä¢¬†They Work For You\n\nBut also from:\n\n‚Ä¢ UNDP for HDI, GII, MYS\n\n\n‚Ä¢¬†ONS for UK births data\n\n\n‚Ä¢¬†International Institute for Democracy and Electoral Assistance\n\n\n‚Ä¢¬†V-Dem Institute for Electoral democracy index\n\n\n‚Ä¢¬†Google Public Data for hemispshere analysis\n\n\nEveryPolitician\n\n\n\nEveryPolitician is an initiative to improve the transparency and accountability in politics. It is an open format, accesible source that incldues almost all present-day national-level legislators\n\n\nThe core dataset was obtained from EveryPolitician through a two-step process. EveryPolitician provides a machine-readable ‚Äòindex file‚Äô in JSON format which contains details about and links to the data for each individual legislature. The links to all the datasets were collected and these were then extracted using the ‚Äòget‚Äô function of the module ‚Äòrequests‚Äô, similarly to web scraping. The data was obtained in JSON format, converted to a ‚Äòpandas‚Äô dataframe, and saved to a csv file for later use, since the data collection functions took a long time to run.\n\nTo check out the website please follow the link: http://everypolitician.org \n\nUN Database\n\n\n\nFor completeness, we used the UN database to fill in the gaps of our datasets.\n\n\nWikipedia\n\n\n\nAs a free encyclopedia, Wikipedia has a wealth of information that is useful to what we are looking for. Therefore, we used the Wikipedia API to access data from their databases for our UK focused analysis.\n\n\nFor our UK-focused analysis, we used the Wikipedia API and BeautifulSoup-aided HTML-scraping to collect data on all sitting UK MPs (from each of the England, Wales, Scotland and Northern Ireland pages) - we chose this source as it provides alma mater and birth date in a scrapable fashion (although we did encounter some roadblocks in the process!) However, Wikipedia allows for public contributions so to ensure data quality we cross-checked this Wikipedia data with another source, to limit errors in the dataset. This was indeed the case given that the data initially included MPs that had resigned/passed away and (once we accounted for this) was missing an MP!\n\n\n\nTheyWorkForYou\n\n\n\n\n\n\n\n\nTo identify the missing MP, we cross checked using a website called TheyWorkForYou that sources its data directly from official parliamentary sources.\n\n\n\nData Cleaning\n\n\n\nAfter collecting the relevant data we needed, we cleaned the data by remvoing redundant, missing, duplicated, and uncessary data.\n\n\nBut specifically to correct for a skew‚Ä¶\n\n\nBeyond the initial data cleaning expected to make the dataset usable in analysis, we needed to perform some operations before the EveryPolitician dataset was fit for purpose. Initially, the proportion of politicians with a January birthday was more than 4 times greater than any of the other months. Upon deeper analysis, this was attributed to the standardised value of 1 January being assigned to politicians for which birth month data was not available (as the pd.to_datetime function defaulted to this when no day/month information is provided). We identified this phenomenon as the January skew. After exploring a few methods to address this, we chose to omit outlier countries that had an unreasonable number of 1 Jan values. The threshold for the omission was computed by excluding countries where the ratio of records on January 1st was more than 10 times the expected ratio of records for Jan 1st - seven countries for which this threshold was violated were excluded from the analysis, including Syria and Cameroon for which the proportion of people born on 1 January were 98.2% and 26.8% respectively. This differs greatly from the global proportion of 8.97% of births in January. Hence such results were removed from our birth month analysis to safeguard data quality, and then we were able to perform our analyses.\n\n\n\nData Analysis and Exploration\n\n\n\nOnce we had tidy dataframes, and clean data, we started to plot our data using the plotnine package.\n\n\nFrom this we started to detect patterns and trends that we discuss in each section of the website\n\nTo begin answering our question: \n\nWe first wanted to group MPs by birth month as this is the most obvious place to start\n\n\nThis gives us an idea of the distribution of the MPs‚Äô birth month as the page ‚ÄòExploring Birth Month‚Äô\n\n\nWe discuss the trends we observed from our plots but we realise that there may be underlying patterns that just plotting the birth month of all politicians may not uncover\n\n\nTherefore we decided to compare developing countries to developed countries\n\n\nThis was slightly problematic as many of the developing countries had messy data\n\n\nDuring the birth month analysis process, we noted (especially for some of the grouped analyses) that data for many less-developed countries often contained far fewer entries and was generally less complete. For instance many countries in Sub saharan Africa such as Eritrea and Sudan as well as some in Asia and Latin America like Myanmar and Venezuela. When performing gender analyses, we also noted the impact of data for historical MPs dampening the observed results. Therefore, due to these data quality issues (and facilitating deeper analysis of certain factors that the EveryPolitician dataset did not allow for, such as alma mater), we decided to perform a deep dive into the UK. From a data science perspective, focusing on one country allows us to address concerns about variations in data availability, quality and consistency across regions. From a personal perspective, we were the most familiar with universities from the UK given our attendance to one and hence thought it most interesting and reasonable to investigate.\n\n\nFor this UK-focused analysis, we used the Wikipedia API and BeautifulSoup-aided HTML-scraping to collect data on all sitting UK MPs (from each of the England, Wales, Scotland and Northern Ireland pages) - we chose this source as it provides alma mater and birth date in a scrapable fashion (although we did encounter some roadblocks in the process!) However, Wikipedia allows for public contributions so to ensure data quality we cross-checked this Wikipedia data with another source, to limit errors in the dataset. This was indeed the case given that the data initially included MPs that had resigned/passed away and (once we accounted for this) was missing an MP!\n\n\nUsing the TheyWorkForYou added data, cross referencing produced 23 anomalies between the dataset, however, given the nature of similar names (eg. Jon Ashworth vs Jonathan Ashworth) we needed to find the missing MP manually from the anomaly list identified by the regex search command. After correcting for this the dataset was ready for use containing data on all 650 MPs in the UK (i.e across Wales, Scotland, England and Northern Ireland)\n\n\nTo add depth to our analysis\n\n\nTo add explore other disparities in politics, we delve deeper into gender disparities.\n\n\nAs with most professions, females tend to be significantly underepresentated in comparison to males, thus we decided to investigate whether we also see disparities in politics‚Ä¶spoiler alert, we do!\n\n\nJust doing that extra bit‚Ä¶\n\nAs an addition, we investigate other paths such as first letter of a politicians name and their zodiac (which is purely for entertainment purposes)"
  },
  {
    "objectID": "index.html#project-description",
    "href": "index.html#project-description",
    "title": "Month Marginalisation: Is there a relative age effect in politics?",
    "section": "Project Description",
    "text": "Project Description\nOur project explores whether correlations are observed between certain factors/characteristics and becoming/being a politician. Initially, we examine the influence of birth month, before extending our analysis to factors such as the first letter of politicians‚Äô names, gender, and even their zodiac signs! Our analysis spans across more than 200 countries allowing us to identify general trends and variances between country groups based on birth month, HDI, mean years of schooling, socioeconomic group, and hemisphere groupings. After this (given some data limitations), we look the United Kingdom in greater depth, constructing a new dataset to delve deeper into the significance of University/Alma Mater and age as potential variables affecting political careers. Through this we hope to identify some interesting trends in characteristics amongst the politicians that represent and govern us."
  },
  {
    "objectID": "zodiac.html",
    "href": "zodiac.html",
    "title": "Exploring Zodiac",
    "section": "",
    "text": "Code\n# Import libraries\nimport pandas as pd\nfrom plotnine import *\n\n\n\nFor entertainment purposes only, we delved into the mysterious world of zodiac signs and uncovered an intriguing association between astrology and political careers.\n\n\n\nCode\ndata=pd.read_csv('data/data_included.csv')\ndata=data[data.birth_date.str.len()==10]\ndata['birth_date']=pd.to_datetime(data['birth_date'], errors='coerce')\ndata['month']=data['birth_date'].dt.month.astype(str).astype(float)\ndata['day']=data['birth_date'].dt.day.astype(str).astype(float) \n\n# Classify data by zodiac signs\n\n#Taurus‚ÄîApril 20-May 20\ntaurus=data[((data['month']==4) & (data['day']&gt;19)) | ((data['month']==5) & (data['day']&lt;21))]\n#Gemini‚ÄîMay 21-June 20\ngemini=data[((data['month']==5) & (data['day']&gt;20)) | ((data['month']==6) & (data['day']&lt;21))]\n#Cancer‚ÄîJune 21-July 22\ncancer=data[((data['month']==6) & (data['day']&gt;20)) | ((data['month']==7) & (data['day']&lt;23))]\n#Leo‚ÄîJuly 23-August 22\nleo=data[((data['month']==7) & (data['day']&gt;22)) | ((data['month']==8) & (data['day']&lt;23))]\n#Virgo‚ÄîAugust 23-September 22\nvirgo=data[((data['month']==8) & (data['day']&gt;22)) | ((data['month']==9) & (data['day']&lt;23))]\n#Libra‚ÄîSeptember 23-October 22\nlibra=data[((data['month']==9) & (data['day']&gt;22)) | ((data['month']==10) & (data['day']&lt;23))]\n#Scorpio‚ÄîOctober 23-November 21\nscorpio=data[((data['month']==10) & (data['day']&gt;22)) | ((data['month']==11) & (data['day']&lt;22))]\n#Sagittarius‚ÄîNovember 22-December 21\nsagittarius=data[((data['month']==11) & (data['day']&gt;21)) | ((data['month']==12) & (data['day']&lt;22))]\n#Capricorn‚ÄîDecember 22-January 19\ncapricorn=data[((data['month']==12) & (data['day']&gt;21)) | ((data['month']==1) & (data['day']&lt;20))]\n#Aquarius‚ÄîJanuary 20-February 18\naquarius=data[((data['month']==1) & (data['day']&gt;19)) | ((data['month']==2) & (data['day']&lt;19))]\n#Pisces‚ÄîFebruary 19-March 20\npisces=data[((data['month']==2) & (data['day']&gt;18)) | ((data['month']==3) & (data['day']&lt;21))]\n#Aries‚ÄîMarch 21-April 19\naries=data[((data['month']==3) & (data['day']&gt;20)) | ((data['month']==4) & (data['day']&lt;20))]\n\n\n# Create a dataframe with the counts of each sign\ndf=pd.DataFrame([aries.shape[0], taurus.shape[0], gemini.shape[0], cancer.shape[0], leo.shape[0], virgo.shape[0], libra.shape[0], scorpio.shape[0], sagittarius.shape[0], capricorn.shape[0], aquarius.shape[0], pisces.shape[0]] , columns=['count'], index=[ 'Aries','Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo', 'Libra', 'Scorpio', 'Sagittarius', 'Capricorn', 'Aquarius', 'Pisces'])\ndf.index=pd.CategoricalIndex(df.index, categories=['Aries','Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo', 'Libra', 'Scorpio', 'Sagittarius', 'Capricorn', 'Aquarius', 'Pisces'], ordered=True)\ndf['percent']=df['count']/df['count'].sum()*100\ndf['percent']=df['percent'].round(2)\n# df\n\n\nFigure 1 represents the zodiac distribution of MPs\n\n\nCode\n# Plot the distribution of zodiac signs\nggplot(df, aes(x=df.index, y='percent')) \\\n + geom_bar(stat='identity', fill='#CF88CF') \\\n + labs(x='Zodiac', y='Count') \\\n + theme(figure_size=(11,5))\\\n + labs(title='Figure 1: Zodiac Distribution of MPs')\\\n + geom_hline(yintercept=8.33, linetype='dashed', color='blue')\n\n\n\n\n\nFigure 2 plots the percentage difference of MPs and their zodiac signs\n\n\nCode\n\n# Plotting the percentage difference. Using 8.33 since population data for zodiac signs is unavailable.\ndf['difference']=df['percent']-8.33\ndf['pc_difference']=df['difference']/8.33*100\nggplot(df, aes(x=df.index, y='pc_difference', fill='pc_difference')) \\\n + geom_bar(stat='identity') \\\n + labs(x='Zodiac', y='% Difference') \\\n + theme(figure_size=(11,5))\\\n + labs(title='Zodiac Distribution of MPs')\\\n + scale_fill_gradient(low='purple', high='green')\\\n + geom_hline(yintercept=0, linetype='solid', color='black')\n\n\n\n\n\n\nIndividuals born under the first six zodiac signs appear to have an uncanny proclivity towards becoming Members of Parliament. Cancerians and Taurus almost have a celestial VIP access to the political arena!\n\n\nBut, sadly, it appears that the stars have conspired against you, Scorpios. Perhaps they were engrossed in their own enigmatic allure, or were too preoccupied with scheming world dominance from the shadows. Don‚Äôt be concerned, Scorpios; your cosmic destiny may have something even more fascinating in store for you, such as becoming a master spy or TV superstar.\n\n\n\n\nCode\n# Defining the zodiac signs\n\nrabbit=[1915, 1927, 1939, 1951, 1963, 1975, 1987, 1999, 2011, 2023]\ndragon=[1916, 1928, 1940, 1952, 1964, 1976, 1988, 2000, 2012, 2024]\nsnake=[1917, 1929, 1941, 1953, 1965, 1977, 1989, 2001, 2013, 2025]\nhorse=[1918, 1930, 1942, 1954, 1966, 1978, 1990, 2002, 2014, 2026]\nsheep=[1919, 1931, 1943, 1955, 1967, 1979, 1991, 2003, 2015, 2027]\nmonkey=[1920, 1932, 1944, 1956, 1968, 1980, 1992, 2004, 2016, 2028]\nrooster=[1921, 1933, 1945, 1957, 1969, 1981, 1993, 2005, 2017, 2029]\ndog=[1922, 1934, 1946, 1958, 1970, 1982, 1994, 2006, 2018, 2030]\npig=[1923, 1935, 1947, 1959, 1971, 1983, 1995, 2007, 2019, 2031]\nrat=[1924, 1936, 1948, 1960, 1972, 1984, 1996, 2008, 2020, 2032]\nox=[1925, 1937, 1949, 1961, 1973, 1985, 1997, 2009, 2021, 2033]\ntiger=[1926, 1938, 1950, 1962, 1974, 1986, 1998, 2010, 2022, 2034]\n\n# Function to convert year to zodiac sign\ndef year_to_zodiac(year):\n    '''Converts year to Chinese zodiac sign'''\n    if year in rabbit:\n        return 'Rabbit'\n    if year in dragon:\n        return 'Dragon'\n    if year in snake:\n        return 'Snake'\n    if year in horse:\n        return 'Horse'\n    if year in sheep:\n        return 'Sheep'\n    if year in monkey:\n        return 'Monkey'\n    if year in rooster:\n        return 'Rooster'\n    if year in dog:\n        return 'Dog'\n    if year in pig:\n        return 'Pig'\n    if year in rat:\n        return 'Rat'\n    if year in ox:\n        return 'Ox'\n    if year in tiger:\n        return 'Tiger'\n\n# Calculating counts and percentages of zodiac signs\ndata=pd.read_csv('data/data.csv')\ndata['birth_date']=pd.to_datetime(data['birth_date'], errors='coerce')\ndata['year']=data['birth_date'].dt.year\ndata['zodiac']=data['year'].apply(year_to_zodiac)\n\ncount_df=data.groupby('zodiac').count()[['name']]\ncount_df['percent']=count_df['name']/count_df['name'].sum()*100\ncount_df['percent']=count_df['percent'].round(2)\ncount_df['difference']=count_df['percent']-8.33\ncount_df['pc_difference']=(count_df['difference']/8.33*100).round(2)\n\ncount_df=count_df.reindex(['Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', 'Horse', 'Sheep', 'Monkey', 'Rooster', 'Dog', 'Pig'])\ncount_df.index=pd.CategoricalIndex(['Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', 'Horse', 'Sheep', 'Monkey', 'Rooster', 'Dog', 'Pig'], categories=['Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', 'Horse', 'Sheep', 'Monkey', 'Rooster', 'Dog', 'Pig'], ordered=True)\n# count_df \n\n\n\n\nCode\n# Plotting\nfrom plotnine import *\nggplot(count_df, aes(x=count_df.index, y='pc_difference', fill='pc_difference')) \\\n    + geom_bar(stat='identity') \\\n    + labs(x='Chinese Zodiac', y='% Difference') \\\n    + scale_fill_gradient(low='purple', high='green') \\\n    + theme(figure_size=(10,5)) \n\n\n\n\n\nAs the mythological story in the Chinese zodiac goes, the Rat rode on the Ox but jumped off at the last moment to finish first in the race of animals, depriving the Ox of its victory. In political representation too the Rat seems to be enjoying success with a 4.2% advantage, at the expense of those born in the Year of the Ox (-5.3%). The prevalence of the remaining signs seems to follow their finishing order in the race‚Ä¶\n     ‚ö†Ô∏è For obvious reasons this inredibly insightful comparison is for complete entertainment purposes"
  },
  {
    "objectID": "day_birth.html",
    "href": "day_birth.html",
    "title": "Exploring First letter of a name",
    "section": "",
    "text": "Code\n# Read data\nimport pandas as pd\nfrom plotnine import *\ndata=pd.read_csv('data/data.csv') \n\n\n# First letter of full name\nfirst_letters=data['name'].str[0].value_counts()\n# first_letters \n\n\n\n\nCode\n# Plot for first letter of full name\nfirst_letters=pd.DataFrame(first_letters.head(15))\nfirst_letters.index=pd.Categorical(first_letters.index,categories=first_letters.index,ordered=True)\n(ggplot(first_letters,aes(x=first_letters.index, y=first_letters['count']))\n + geom_bar(stat='identity', fill='steelblue')\n + theme_classic()\n + labs(title='First letter of full name',x='First letter',y='Count')\n)\n\n\n\n\n\nWhen analysing the bar chart for groupings to do with the first letter of the name there is no distinct or noticeable trend among the alphabets that most politicians‚Äô names start with.\n\nThis is substantiated by A; the first letter of the alphabet having the second highest percentage of political representatives while, the highest percentage of political representatives‚Äô names starting with M which is halfway down the alphabet.\n\n\nSimilarly the highest frequency of politicians‚Äô names start with the letter B followed by S and M.\n\n\n\nCode\n# First letter of family name\nlast_name_letters=data['family_name'].dropna().apply(lambda x: x[0]).value_counts()\n# last_name_letters \n\n\n\n\n\nCode\n\n# Plot for first letter of family name\nlast_name_letters=pd.DataFrame(last_name_letters.head(15))\nlast_name_letters.index=pd.Categorical(last_name_letters.index,categories=last_name_letters.index,ordered=True)\n(ggplot(last_name_letters,aes(x=last_name_letters.index, y= last_name_letters['count']))\n    + geom_bar(stat='identity', fill='green')\n    + theme_classic()\n    + labs(title='First letter of family name',x='First letter',y='Count')\n) \n\n# y=first_letters['count']))"
  },
  {
    "objectID": "gender.html",
    "href": "gender.html",
    "title": "Exploring Gender",
    "section": "",
    "text": "Investigating disparities in gender is important to this research question. There are many underlying, systematic biases which result in a lack of female representation in certain industries and roles. We explore gender disparities in politics below.\n\n\nCode\nimport pandas as pd\nfrom plotnine import *\ndf=pd.read_csv('data/data.csv')\n\n\n\nGender split across all countries\n\n\n\nCode\ngender_df=df.groupby(df['gender']).count()[['name']]\ngender_df['percentage']=(gender_df['name']/gender_df['name'].sum()*100).round(1)\ngender_df.rename(columns={'name':'count'},inplace=True)\ngender_df.reset_index(inplace=True)\n\nggplot(gender_df, aes(x='gender', y='percentage', fill='gender'))\\\n+ geom_bar(stat='identity', position='dodge', width=0.7)\\\n+ geom_text(aes(label='percentage'), position=position_dodge(width=0.7), va='bottom')\\\n+ labs(title='Figure 1: Gender Split across All Countries')\\\n+ theme(figure_size=(10,5,))\n\n\n\n\n\nThis figure is alarming!\n\nG7 Country wise data\n\nWe now break down the above data by country and development to understand specific data trends within and across different countries of different development\n\n\nCode\n# G7 Country wise data\ng7_countries=['Canada','France','Germany','Italy','Japan','United Kingdom','United States']\ng7_df=df[df['country'].isin(g7_countries)]\n# g7_df \n\ng7_gender_df=g7_df.groupby(g7_df['gender']).count()[['name']]\ng7_gender_df['percentage']=(g7_gender_df['name']/g7_gender_df['name'].sum()*100).round(1)\ng7_gender_df.rename(columns={'name':'count'},inplace=True)\ng7_gender_df.reset_index(inplace=True) \n\nggplot(g7_gender_df, aes(x='gender', y='percentage', fill='gender'))\\\n+ geom_bar(stat='identity', position='dodge', width=0.7)\\\n+ geom_text(aes(label='percentage'), position=position_dodge(width=0.7), va='bottom')\\\n+ labs(title='Gender Split across G7 Countries')\\\n+ theme(figure_size=(10,5,))\n\n\n\n\n\n\nThe gender gap in political representation is relatively robust to different groupings based on HDI, MYS or other development indicators. It certainly showcases a heavily positive correlation between being a politician and being male. This can be backed up by historical and cultural norms, gender roles, structural barriers, and gender biases in the electorate. These factors play into limiting women‚Äôs access to political opportunities thereby discouraging participation in politics.\n\n\nAlthough this result is intuitive it is worthwhile considering that the disparity between being a politician given you are male versus female is significantly more apparent for highly gender-unequal countries. This is shown most clearly by the percentage difference between being a politician given you are female for the highest Gender Inequality Index countries when compared to the lowest ones. So while the average split globally for gender representation is 22.2% female and 77.8% male, for the lowest GII countries it is 11.08% and 88.92%. This difference is not as pronounced for other development indicators such as income and HDI as visualised in the graphs. This is unsurprising considering the construction of the HDI index and mean income is by nature focused more on overall economic factors whereas the GII is more suited to measuring gender disparities and biases.Moreover this explains why some countries like Rwanda that are classified as low development countries with an index of 0.543 actually have high political representation as accounted for by the low ‚ÄòGender Inequality‚Äô value of 0.338.\n\n\nUK only data\n\n\n\nCode\n# UK only data\nuk_df=df[df['country']=='United Kingdom']\nuk_gender_df=uk_df.groupby(uk_df['gender']).count()[['name']]\nuk_gender_df['percentage']=(uk_gender_df['name']/uk_gender_df['name'].sum()*100).round(1)\nuk_gender_df.rename(columns={'name':'count'},inplace=True)\nuk_gender_df.reset_index(inplace=True)\n# uk_gender_df\n\n# Currently this sits at 35% in house of commons and 29% in house of lords \n\n\nggplot(uk_gender_df, aes(x='gender', y='percentage', fill='gender'))\\\n+ geom_bar(stat='identity', position='dodge', width=0.7)\\\n+ geom_text(aes(label='percentage'), position=position_dodge(width=0.7), va='bottom')\\\n+ labs(title='Gender Split across UK (incl. historical data)')\\\n+ theme(figure_size=(10,5,))\n\n\n\n\n\n\nTop Highest HDI Countries\n\n\n\nCode\n# Top 5 Highest HDI countries\nTop_5_HDI_countries=['Switzerland','Norway','Iceland','Hong Kong','Australia']\nH_HDI_df=df[df['country'].isin(Top_5_HDI_countries)]\nH_HDI_df\nH_HDI_gender_df=H_HDI_df.groupby(H_HDI_df['gender']).count()[['name']]\nH_HDI_gender_df['percentage']=(H_HDI_gender_df['name']/H_HDI_gender_df['name'].sum()*100).round(1)\nH_HDI_gender_df.rename(columns={'name':'count'},inplace=True)\nH_HDI_gender_df.reset_index(inplace=True)\n# H_HDI_gender_df \n\nggplot(H_HDI_gender_df, aes(x='gender', y='percentage', fill='gender'))\\\n+ geom_bar(stat='identity', position='dodge', width=0.7)\\\n+ geom_text(aes(label='percentage'), position=position_dodge(width=0.7), va='bottom')\\\n+ labs(title='Gender Split across Top 5 HDI Countries')\\\n+ theme(figure_size=(10,5,))\n\n\n\n\n\n\nTop Lowest HDI countries\n\n\n\nCode\n# Top 5 lowest HDI countries\nTop_5_Lowest_HDI_countries=['South Sudan','Chad','Niger','Central African Republic','Burundi']\nL_HDI_df=df[df['country'].isin(Top_5_Lowest_HDI_countries)]\nL_HDI_df\nL_HDI_gender_df=L_HDI_df.groupby(L_HDI_df['gender']).count()[['name']]\nL_HDI_gender_df['percentage']=(L_HDI_gender_df['name']/L_HDI_gender_df['name'].sum()*100).round(1)\nL_HDI_gender_df.rename(columns={'name':'count'},inplace=True)\nL_HDI_gender_df.reset_index(inplace=True)\n# L_HDI_gender_df \n\nggplot(L_HDI_gender_df, aes(x='gender', y='percentage', fill='gender'))\\\n+ geom_bar(stat='identity', position='dodge', width=0.7)\\\n+ geom_text(aes(label='percentage'), position=position_dodge(width=0.7), va='bottom')\\\n+ labs(title='Gender Split across Bottom 5 HDI Countries')\\\n+ theme(figure_size=(10,5,))\n\n\n\n\n\n\n\nCode\nimport utils\n\n# '''This module contains utility functions, variables, and data structures for use in the notebooks.'''\n\nimport pandas as pd\n\n#------------------------------------Top and bottom countries of indices------------------------------------\n\n# UN Indices Data:\nindices_data=pd.read_csv('data/UN HDR all indices data.csv')\nindices_data=indices_data[['country','hdi_2021','le_2021','eys_2021','mys_2021','gnipc_2021', 'gdi_2021','ihdi_2021','coef_ineq_2021','region', 'gii_2021']]\n\nhigh_hdi=indices_data[indices_data['hdi_2021']&gt;0.8]['country'].tolist()\nlow_hdi=indices_data[indices_data['hdi_2021']&lt;0.7]['country'].tolist()\n\ntop_50_mys=indices_data.sort_values(by=['mys_2021'], ascending=False).head(50)['country'].tolist()\nbottom_50_mys=indices_data.sort_values(by=['mys_2021'], ascending=True).head(50)['country'].tolist()\n\ntop_gii=indices_data.sort_values(by=['gii_2021'], ascending=False).head(20)['country'].tolist()\nbottom_gii=indices_data.sort_values(by=['gii_2021'], ascending=True).head(20)['country'].tolist()\n\n#------------------------------------Income groups------------------------------------\n\n# World Bank Data:\nwb_data=pd.read_csv('data/income_data.csv')\n\nlow_income=wb_data[wb_data['Income group']=='Low income']['Country'].tolist()\nhigh_income=wb_data[wb_data['Income group']=='High income']['Country'].tolist()\n\n#------------------------------------V-Dem Electoral Democracy Score------------------------------------\nvdem_data=pd.read_csv('data/v_dem_elec_democracy.csv')\nvdem_data=vdem_data.query('Year==2022')\n\nlow_dem=vdem_data[vdem_data['electdem_vdem_owid']&lt;0.4]['Entity'].tolist()\nhigh_dem=vdem_data[vdem_data['electdem_vdem_owid']&gt;0.8]['Entity'].tolist()\n\n#------------------------------------Hemispheres------------------------------------\n\n#north_hem=['Algeria', 'Benin', 'Burkina Faso', 'Burundi', 'Cameroon', 'Central African Republic', 'Chad', 'Comoros', 'Djibouti', 'Egypt', 'Equatorial Guinea', 'Eritrea', 'Ethiopia', 'Gabon', 'Gambia', 'Ghana', 'Guinea', 'Guinea-Bissau', 'Ivory Coast', 'Kenya', 'Liberia', 'Libya', 'Mali', 'Mauritania', 'Niger', 'Nigeria', 'Rwanda', 'Senegal', 'Sierra Leone', 'Somalia', 'South Sudan', 'Sudan', 'Tanzania', 'Togo', 'Tunisia', 'Uganda', 'Zambia', 'Zimbabwe', 'Afghanistan', 'Armenia', 'Azerbaijan', 'Bahrain', 'Bangladesh', 'Bhutan', 'Brunei', 'Cambodia', 'China', 'Cyprus', 'Georgia', 'India', 'Indonesia', 'Iran', 'Iraq', 'Israel', 'Japan', 'Jordan', 'Kazakhstan', 'Kuwait', 'Kyrgyzstan', 'Laos', 'Lebanon', 'Malaysia', 'Maldives', 'Mongolia', 'Myanmar', 'Nepal', 'North Korea', 'Oman', 'Pakistan', 'Palestine', 'Philippines', 'Qatar', 'Russia', 'Saudi Arabia', 'Singapore', 'South Korea', 'Sri Lanka', 'Syria', 'Taiwan', 'Tajikistan', 'Thailand', 'Turkey', 'Turkmenistan', 'United Arab Emirates', 'Uzbekistan', 'Vietnam', 'Albania', 'Andorra', 'Austria', 'Belarus', 'Belgium', 'Bosnia and Herzegovina', 'Bulgaria', 'Croatia', 'Czech Republic', 'Denmark', 'Estonia', 'Finland', 'France', 'Germany', 'Greece', 'Hungary', 'Iceland', 'Ireland', 'Italy', 'Latvia', 'Liechtenstein', 'Lithuania', 'Luxembourg', 'Macedonia', 'Malta', 'Moldova', 'Monaco', 'Montenegro', 'Netherlands', 'North Macedonia', 'Norway', 'Poland', 'Portugal', 'Romania', 'San Marino', 'Serbia', 'Slovakia', 'Slovenia', 'Spain', 'Sweden', 'Switzerland', 'Vatican City', 'Antigua and Barbuda', 'Bahamas', 'Barbados', 'Belize', 'Canada', 'Costa Rica', 'Cuba', 'Dominica', 'Dominican Republic', 'El Salvador', 'Grenada', 'Guatemala', 'Haiti', 'Honduras', 'Jamaica', 'Mexico', 'Nicaragua', 'Panama', 'Saint Kitts and Nevis', 'Saint Lucia', 'Saint Vincent and the Grenadines', 'Trinidad and Tobago', 'United States of America', 'Oceania', 'Fiji', 'Kiribati', 'Marshall Islands', 'Micronesia', 'Nauru', 'New Zealand', 'Palau', 'Papua New Guinea', 'Samoa', 'Solomon Islands', 'Tonga', 'Tuvalu', 'Vanuatu']\n\ncountries=pd.read_csv('data/countries.csv',encoding='latin-1')\nnorth_hem=countries[countries['latitude']&gt;0]['name'].tolist()\nsouth_hem=countries[countries['latitude']&lt;0]['name'].tolist()\n\n#------------------------------------Gender quotas------------------------------------\n\nquotas_df=pd.read_csv('data/gender_quotas.csv')\nlegal_quotas=quotas_df[quotas_df['Voluntary political party quotas']=='No']['Country'].tolist()\n# Gender inequality index (GII)\n\ntop_gii=df.query('country in @top_gii')\nbottom_gii=df.query('country in @bottom_gii')\ntop_gii_df=top_gii.groupby('gender').count()[['name']]\nbottom_gii_df=bottom_gii.groupby('gender').count()[['name']]\ngender_df=pd.merge(top_gii_df, bottom_gii_df, how='inner',left_index=True,right_index=True)\ngender_df.columns=['top_gii','bottom_gii']\n\n# Add columns for percentage\ngender_df['top_gii_pc']=(gender_df['top_gii']/gender_df['top_gii'].sum()*100).round(2)\ngender_df['bottom_gii_pc']=(gender_df['bottom_gii']/gender_df['bottom_gii'].sum()*100).round(2)\n# gender_df\n\n\n\n\nCode\n# Create a double bar plot for Gender Inequality Index analysis\ngii_plot_df=pd.concat([gender_df[['top_gii_pc']].rename(columns={'top_gii_pc':'percentage'})\\\n                   ,gender_df[['bottom_gii_pc']].rename(columns={'bottom_gii_pc':'percentage'})],axis=0).reset_index()\ngii_plot_df['group']=['Highest GII Countries' if i&lt;2 else 'Lowest GII Countries' for i in range(4)]\nggplot(gii_plot_df,aes(x='gender',y='percentage',fill='group'))\\\n    + geom_bar(stat='identity', position='dodge', width=0.7) \\\n    + labs(x='Gender', y='Percentage', title='Highest GII Countries vs Lowest GII Countries') \\\n    + theme(figure_size=(10, 5))\n\n\n\n\n\n\n\nCode\n# HDI\n\nhigh_hdi=df.query('country in @high_hdi')\nlow_hdi=df.query('country in @low_hdi')\nhigh_hdi_df=high_hdi.groupby('gender').count()[['name']]\nlow_hdi_df=low_hdi.groupby('gender').count()[['name']]\ngender_df=pd.merge(high_hdi_df, low_hdi_df, how='inner',left_index=True,right_index=True)\ngender_df.columns=['high_hdi','low_hdi']\n\n# Add columns for percentage\ngender_df['high_hdi_pc']=(gender_df['high_hdi']/gender_df['high_hdi'].sum()*100).round(2)\ngender_df['low_hdi_pc']=(gender_df['low_hdi']/gender_df['low_hdi'].sum()*100).round(2)\n# gender_df \n\n\n\n\nCode\n# Create a double bar plot for HDI analysis\nhdi_plot_df=pd.concat([gender_df[['high_hdi_pc']].rename(columns={'high_hdi_pc':'percentage'})\\\n                   ,gender_df[['low_hdi_pc']].rename(columns={'low_hdi_pc':'percentage'})],axis=0).reset_index()\nhdi_plot_df['group']=['High HDI Countries' if i&lt;2 else 'Low HDI Countries' for i in range(4)]\n# hdi_plot_df \nggplot(hdi_plot_df,aes(x='gender',y='percentage',fill='group'))\\\n    + geom_bar(stat='identity', position='dodge', width=0.7) \\\n    + labs(x='Gender', y='Percentage', title='High HDI Countries vs Low HDI Countries') \\\n    + theme(figure_size=(10, 5))\n\n\n\n\n\n\n\nCode\n# V-Dem\n\nhigh_vdem=df.query('country in @high_dem')\nlow_vdem=df.query('country in @low_dem')\nhigh_vdem_df=high_vdem.groupby('gender').count()[['name']]\nlow_vdem_df=low_vdem.groupby('gender').count()[['name']]\ngender_df=pd.merge(high_vdem_df, low_vdem_df, how='inner',left_index=True,right_index=True)\ngender_df.columns=['high_vdem','low_vdem']\n\n# Add columns for percentage\ngender_df['high_vdem_pc']=(gender_df['high_vdem']/gender_df['high_vdem'].sum()*100).round(2)\ngender_df['low_vdem_pc']=(gender_df['low_vdem']/gender_df['low_vdem'].sum()*100).round(2)\n# gender_df \n\n# Create a double bar plot for V-DEM analysis\nvdem_plot_df=pd.concat([gender_df[['high_vdem_pc']].rename(columns={'high_vdem_pc':'percentage'})\\\n                   ,gender_df[['low_vdem_pc']].rename(columns={'low_vdem_pc':'percentage'})],axis=0).reset_index()\nvdem_plot_df['group']=['High V-DEM Countries' if i&lt;2 else 'Low V-DEM Countries' for i in range(4)]\nggplot(vdem_plot_df,aes(x='gender',y='percentage',fill='group'))\\\n    + geom_bar(stat='identity', position='dodge', width=0.7) \\\n    + labs(x='Gender', y='Percentage', title='High V-DEM Countries vs Low V-DEM Countries') \\\n    + theme(figure_size=(10, 5))\n\n\n\n\n\n\n\nCode\n# Income Category\n\nhigh_income=df.query('country in @high_income')\nlow_income=df.query('country in @low_income')\nhigh_income_df=high_income.groupby('gender').count()[['name']]\nlow_income_df=low_income.groupby('gender').count()[['name']]\ngender_df=pd.merge(high_income_df, low_income_df, how='inner',left_index=True,right_index=True)\ngender_df.columns=['high_income','low_income']\n\n# Add columns for percentage\ngender_df['high_income_pc']=(gender_df['high_income']/gender_df['high_income'].sum()*100).round(2)\ngender_df['low_income_pc']=(gender_df['low_income']/gender_df['low_income'].sum()*100).round(2)\ngender_df \n\n# Create a double bar plot for Income analysis\nincome_plot_df=pd.concat([gender_df[['high_income_pc']].rename(columns={'high_income_pc':'percentage'})\\\n                   ,gender_df[['low_income_pc']].rename(columns={'low_income_pc':'percentage'})],axis=0).reset_index()\nincome_plot_df['group']=['High Income Countries' if i&lt;2 else 'Low Income Countries' for i in range(4)]\nggplot(income_plot_df,aes(x='gender',y='percentage',fill='group'))\\\n    + geom_bar(stat='identity', position='dodge', width=0.7) \\\n    + labs(x='Gender', y='Percentage', title='High Income Countries vs Low Income Countries') \\\n    + theme(figure_size=(10, 5))\n\n\n\n\n\n\n\nCode\n# Gender Quotas\n\nquotas=df.query('country in @legal_quotas')\nno_quotas=df.query('country not in @legal_quotas')\nquotas_df=quotas.groupby('gender').count()[['name']]\nno_quotas_df=no_quotas.groupby('gender').count()[['name']]\ngender_df=pd.merge(quotas_df, no_quotas_df, how='inner',left_index=True,right_index=True)\ngender_df.columns=['quotas','no_quotas']\n\n# Add columns for percentage\ngender_df['quotas_pc']=(gender_df['quotas']/gender_df['quotas'].sum()*100).round(2)\ngender_df['no_quotas_pc']=(gender_df['no_quotas']/gender_df['no_quotas'].sum()*100).round(2)\n# gender_df \n\n# Create a double bar plot for Quotas analysis\nincome_plot_df=pd.concat([gender_df[['quotas_pc']].rename(columns={'quotas_pc':'percentage'})\\\n                   ,gender_df[['no_quotas_pc']].rename(columns={'no_quotas_pc':'percentage'})],axis=0).reset_index()\nincome_plot_df['group']=['Countries with Quotas' if i&lt;2 else 'Countries without Quotas' for i in range(4)]\nggplot(income_plot_df,aes(x='gender',y='percentage',fill='group'))\\\n    + geom_bar(stat='identity', position='dodge', width=0.7) \\\n    + labs(x='Gender', y='Percentage', title='Countries with Quotas vs Countries without Quotas') \\\n    + theme(figure_size=(10, 5))"
  },
  {
    "objectID": "final_comms.html",
    "href": "final_comms.html",
    "title": "Final Comments",
    "section": "",
    "text": "To conclude‚Ä¶\n\n\nIn this project we wanted to explore whether there is a relative age effect in politics.\n\n\nWe first showed how we collected and cleaned the data, specifically ovecomimg the January skew.\n\n\nFollowing this, we started to group by our data by birth month to investigate trends in the density of politicians by month and found that the first six momths of the year had a high density of politiciand in comparison to the rest of the year\n\n\nTo futher this analysis, we grouped by HDI levels to understand any disparities between developed and developing countries\n\n\nWe found that the general trends did not hold for developing countries, and we wanted to explore this further\n\n\nHowever, developing countries‚Äô data was messy and incomplete, hence we decided to delve deeper into UK specific analysis and understand how some other factors, related to age, could potentially be linked with being a politician.\n\n\nWe used the Wikipedia API to put together a list of all sitting UK MPs, i.e., from Scotland, England, Wales, and Northern Ireland, and their respective alma maters.\n\n\nAfter putting this list together, plotted the frequency of alma maters to understand which are the most commonly attended universities of the UK MPs. We found that the University of Oxford is the place to be if you ever aspire to become and MP!\n\n\nMoreover, we wanted to explore disparities in gender, as gender discrimination is unfortunately still apparent in all industries, and walks of life.\n\n\nAnd politicis is not different, we found a striking reuslt in gender disparity.\n\n\nEven though gender and university (to some extent) do not reflect on the question we initially asked, we wanted to provide some insight into factors affecting chances of becoming a politician that may not be obvious.\n\n\nThese questions must be explored in order to ensure that voting for your ideal candiate, who is a reflection of a certain set of values and beliefs, is an actual representation of the majority and not just a representation of the elite and powerful. This analysis, if furthered, has real-world policy implications, and is critical for the philosophy of politics."
  }
]